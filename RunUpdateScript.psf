<File version="3.2">
  <FileID>dae19541-b548-4204-90b3-b023969caa1b</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAJzoSURBVHhe7P1ncCRJnvaJ7Ze7e8/sjF9oxk80
Ho80O5JH40veu7vv6p19Z3dmdmZ2eqZ7WndXV3VpjYKWCZlAQmuttZYJrbXWWovUSCS01g89IhMl
UNnd1SUyC4X/r+wxpEe4e3hEZMX/cQ+PyL8gCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgDIHf//if/lPdp59+WicSedcJhaI6NxKJRCKRSBdK
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</Preview>
  <Form>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
upHKBgA=</Form>
  <Code><![CDATA[<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.203
	 Created on:   	4/29/2022 1:37 PM
	 Created by:   	Sophie Carlson
	 Organization: 	
	 Filename:     	RunUpdateScript.psf
	===========================================================================
	.DESCRIPTION
		This project aims to simplify the process of downloading, deploying apps, and running scripts in MECM/SCCM.

		Inspiration: 
		I was tired of constantly clicking buttons in MECM, as well as downloading a bunch of installers. 
		So, I decided to start automating MECM downloads and installs. I wanted to check hashes and 
		make sure files were legitimate, as well as run scans on VirusTotal and through out 
		installation of Malwarebytes Nebula.  

		Then, once I got an app downloaded and deployed, it could take hours for MECM to update.
		So, I decided it would be quicker to make my own deployment scripts and a way to invoke them without the 
		laggy GUI.

		HOW TO USE GUI: 

		Connect: Pretty basic, enter your site code and domain to connect to. Once you click connect,
		it will prefill the scripts and deployment groups into the GUI. There's a button to try
		to install the modules if you don't have them already. 
		
		Download: Select a download folder, select what apps you want, then click download. It downloads
		and saves the hashes to an array. You can use Malwarebytes Nebula (if you have it) to scan the files.
		If you want to use VirusTotal, you need an API Key for free from here: 
			https://support.virustotal.com/hc/en-us/articles/115002100149-API
		
		Deploy: Can import and export settings to an XML file under .\Recipes from where you are running the script.
		It needs some improvements on the detection methods, but it works pretty well. 

		Scripts: Select a script and a group, click run and then it will be run on the collection you specified. 
		
	

		FINAL THOUGHTS, LICENSE:
		This project is still in a very basic stage, so please contribute to it. 
		
		NOTE: You must keep the license and my name in the code. I'm a college student who 
		worked really hard on this and I would really appreciate the recognition. 

#>

##INITIAL SETUP
#Ensure recipes folder exists
if ((Test-Path ".\Recipes") -eq $false)
{
	New-Item -Path ".\Recipes" -ItemType directory
}

#Disable if not connected to MECM/SCCM
$buttonRunScript.Enabled = $false
$connectProgressBar.Hide()
$scriptProgress.Hide()
$runScriptsTab.Enabled = $false
$deployTab.Enabled = $false

#Intune Tab
$labelThankYou.Hide()
$intuneFolderBrowser.Enabled = $false
$intuneBrowseFile.Enabled = $false
$intuneOutputFolderBrowser.Enabled = $false
$intuneButtonPackageIt.Enabled = $false

$labelFolderWithSubfolders.Hide()
$labelFolderNameDeployAppl.Hide()

$script:hashArray = New-Object -TypeName System.Collections.ArrayList

function currTime
{
	#How to Time https://stackoverflow.com/questions/46734884/powershell-adding-milliseconds-to-timestamp
	$script:currTime = Get-Date -Format "(HH:mm:ss)" #"yyyy.MM.dd-HH.mm" #AM or PM is tt
}

currTime

$formMECMBuddyV10_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formMECMBuddyV10 -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-Scripts
{
	#adds scripts from MECM to dropdown windows
	$scriptsDropdown.Items.Clear()
	$scriptsList = (Get-CMScript -Fast).ScriptName | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$scriptsDropdown.Items.Add($s)
		}
	}
	
	#Try to fill in appNameBoxCombo
	$currentPath = Split-Path $script:MyInvocation.MyCommand.Path
	$currentPath += "\Recipes\"
	$listOfAppNames = (Get-ChildItem $currentPath).Basename
	
	foreach ($name in $listOfAppNames)
	{
		$appNameBox.Items.Add($name)
	}
	
}


function Get-Groups
{
	#adds deployments from MECM to dropdown windows
	
	$DeploymentGroupDropdown.Items.Clear() #clear on scripts tab
	$DeploymentGroupBox.Items.Clear() #clear on deploy tab
	$scriptsList = (Get-CMCollection).Name | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$DeploymentGroupDropdown.Items.Add($s) #add to script list
			$deploymentGroupBox.Items.Add($s) #add to deploy list
		}
	}
}


function Get-ExeVersion()
{
	#Version 1.1
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = ".\Files\$appInstallerName"
	)
	
	#Get the EXE version and RETURN the version in script.
	$appVersionTemp = (Get-Item -Path $appInstallerPath).VersionInfo.FileVersion
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $appVersion
	}
}

function Get-MSIVersion()
{
	#Version 1.0
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = "$workingDirectory\$appName\Files\$appName.msi"
	)
	
	#Stack Overflow
	#https://stackoverflow.com/questions/8743122/how-do-i-find-the-msi-product-version-number-using-powershell
	#Original blog: https://winadminnotes.wordpress.com/2010/04/05/accessing-msi-file-as-a-database/
	try
	{
		$FullPath = (Resolve-Path $appInstallerPath).Path
		$windowsInstaller = New-Object -com WindowsInstaller.Installer
		
		$database = $windowsInstaller.GetType().InvokeMember(
			"OpenDatabase", "InvokeMethod", $Null,
			$windowsInstaller, @($FullPath, 0)
		)
		
		$q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
		$View = $database.GetType().InvokeMember(
			"OpenView", "InvokeMethod", $Null, $database, ($q)
		)
		
		$View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
		
		$record = $View.GetType().InvokeMember(
			"Fetch", "InvokeMethod", $Null, $View, $Null
		)
		
		$productVersion = $record.GetType().InvokeMember(
			"StringData", "GetProperty", $Null, $record, 1
		)
		
		$View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)
		
		return $productVersion
		
	}
	catch
	{
		throw "Failed to get MSI file version the error was: {0}." -f $_
	}
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $script:appVersion
	}
}


#Function to scan with malwarebytes, can also pass in your directory to scan with $currDir
#Hidden function of Malwarebytes Nebula:
#https://forums.malwarebytes.com/topic/264189-command-line-scanning/
function MalwarebytesScan
{
	Param
	(
		[Parameter(Mandatory = $false, Position = 0)]
		[string]$currDir = (Get-Location)
	)
	
	#check if old file is under temp and delete.
	if (Test-Path "C:\Temp\scan.txt")
	{
		#Delete old file
		Remove-Item "C:\Temp\scan.txt"
	}
	
	#Make a new file under C:\Temp\scan.txt with the text in it being the path you want to scan ($currDir)
	New-Item -Path "C:\Temp\scan.txt" -ItemType File -Value $currDir
	Start-Process -FilePath "C:\Program Files\Malwarebytes Endpoint Agent\UserAgent\EACmd.exe" -ArgumentList '-ContextScan="C:\Temp\scan.txt"'
	
	#show on GUI we started a scan. 
	$listbox1.Items.Add("$script:currTime Finished invoking Malwarebytes Nebula.")
	
}

#connect to MECM on the local machine (mount as a drive basically)
$ConnectButton_Click = {
	currTime #GUI stuff 
	
	#The following chunk of code can be generated from MECM under Blue bar (top left), Connect via Windows PowerShell ISE
	$script:siteCode = $siteCodeBox.Text
	$listbox1.Items.Add("$script:currTime Now connecting to $script:siteCode - Please wait.")
	
	$connectProgressBar.Show()
	$connectProgressBar.value = 0
	# Site configuration
	$script:siteCode = $siteCodeBox.Text # Site code 
	$ProviderMachineName = $siteURL.Text # SMS Provider machine name
	
	# Customizations
	$initParams = @{ }
	#$initParams.Add("Verbose", $true) # Uncomment this line to enable verbose logging
	#$initParams.Add("ErrorAction", "Stop") # Uncomment this line to stop the script on any errors
	
	# Do not change anything between lines 521 and 537
	 ###################################################
	# Import the ConfigurationManager.psd1 module 
	if ((Get-Module ConfigurationManager) -eq $null)
	{
		Import-Module "$($ENV:SMS_ADMIN_UI_PATH)\..\ConfigurationManager.psd1" @initParams
	}
	
	# Connect to the site's drive if it is not already present
	if ((Get-PSDrive -Name $siteCode -PSProvider CMSite -ErrorAction SilentlyContinue) -eq $null)
	{
		New-PSDrive -Name $siteCode -PSProvider CMSite -Root $ProviderMachineName @initParams
	}
	
	# Set the current location to be the site code.
	Set-Location "$($siteCode):\" @initParams
	
	######################################################
	#whew! We should be connected now. Let's prefill all the GUI dropdowns with info from MECM
	#update log time, set 50% progress, get list of scripts. 
	currTime
	$connectProgressBar.Value = 50
	$listbox1.Items.Add("$script:currTime --> Getting scripts list.")
	Get-Scripts
	
	#log time update, set progress to 75% and get deployment groups. 
	currTime
	$connectProgressBar.Value = 75
	$listbox1.Items.Add("$script:currTime --> Getting deployment groups list.")
	Get-Groups
	
	#Updating progress bar and enabling other tabs which rely on a connection to function
	#FIXME: Could potentially have an error if it doesn't connect and the other tabs get enabled. 
	currTime
	$connectProgressBar.Value = 90
	$runScriptsTab.Enabled = $true
	$buttonRunScript.Enabled = $true
	$deployTab.Enabled = $true
	
	currTime #update log time
	$connectProgressBar.Value = 100 #show progress 100% on the bar
	$listbox1.Items.Add("$script:currTime Finished connecting and retrieving lists.") #log to screen
	
}

#TODO: Update run script with progress and everything. 
$buttonRunScript_Click = {
	currTime
	#Run script on a collection
	$scriptProgress.Show()
	$scriptProgress.Value = 0
	
	#Finds script by name in MECM, runs script based on the GUID 
	$test1 = $scriptsDropdown.Text
	$test2 = $DeploymentGroupDropdown.Text
	$listbox1.Items.Add("$script:currTime $test1 and $test2")
	$listbox1.Items.Add("$script:currTime Attempting to $test1 on the collection $test2 ")
	$scriptObj = (Get-CMScript -Fast -ScriptName $scriptsDropdown.Text).ScriptGUID
	$listbox1.Items.Add("$script:currTime Found $scriptObj")
	
	currTime #update log time before we log, run script on collection ID
	$collectionObj = (Get-CMCollection -Name $DeploymentGroupDropdown.Text).CollectionID
	$listbox1.Items.Add("$script:currTime Got collection $collectionObj")
	
	currTime
	Invoke-CMScript -ScriptGuid $scriptObj -CollectionID $collectionObj
	$listbox1.Items.Add("$script:currTime Invoked the script. Please check MECM for your app or the PowerShell output for errors.")
	
	#TODO: Get better messages here if it fails. There's no live status or anything, we just tell MECM, "HEY! Do this!"
	$scriptProgress.Value = 100
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Write-XML
{
	currTime
	#NOW USES \Recipes\AppName.xml
	$script:appName = $appNameBox.Text
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	if (-not(Test-Path $xmlPath))
	{
		$listbox1.Items.Add("$script:currTime Creating the $appName.xml file in this script's directory.")
		New-Item $xmlPath -Force
	}
	
	#Get variables from input boxes
	
	$script:appName = $appNameBox.Text
	$script:appVendor = $appVendorBox.Text
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation #you may sometimes need this in other areas
	
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	$script:contentLocation 
	$script:installCommand = $installCMDBox.Text #This is probably grabbing this from the GUI: "Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $uninstallCMDBox.Text #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $detectionPathBox.Text
	$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	#END VARIABLE SETUP
	
	
	
	#check if XML exists, check for app name. 
	$script:appName = $appNameBox.Text
	[xml]$readXML = Get-Content $xmlPath
	$allAppNames = $readXML.Apps | ForEach-Object { $_.App.nameOfApp }
	if ($allAppNames -contains $script:appName)
	{
		currTime
		$listbox1.Items.Add("$script:currTime Found appname in the XML file. Changing. ")
		
		#Updates variables in XML and saves.
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		#One XML per app only!
		#$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file all the variables we got from the GUI
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime Didn't find appname in the XML file. Creating entry. ")
		
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
	}
	
	
	
}


function Read-XML
{
	currTime #update time for logging
	#How to use XML Reader
	# https://www.sapien.com/blog/2018/03/22/storing-powershell-variables-in-external-files/comment-page-1/
	
	$script:appName = $appNameBox.Text
	$appName = $script:appName
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	#Read in all of the information from our variables XML file
	#We will need to cast the variable as [XML] when we store all of the file information in it
	if (-not (Test-Path $xmlPath))
	{
		#tell on screen we cannot find the recipe file. 
		$listbox1.Items.Add("Cannot find \Recipes\$appName.xml")
	}
	
	[xml]$readXML = Get-Content -Path $xmlPath
	
	
	#Get variables from XML and save in Variables.
	#it's a bit messy, but this is the format. 
	
	$script:appName = $readXML.Apps.app.nameOfApp
	$script:appVendor = $readXML.Apps.app.vendor
	$script:appVersion = $readXML.Apps.app.version
	$script:fileExtension = $readXML.Apps.app.fileExt
	$script:appDescription = $readXML.Apps.app.description
	
	$script:iconLocation = $readXML.Apps.app.iconFile
	$img = [System.Drawing.Image]::Fromfile($script:iconLocation)
	$iconDisplayBox.Image = $img
	
	$script:userDocsText = $readXML.Apps.app.userDocumentText
	$script:userDocumentationLink = $readXML.Apps.app.userDocumentLink
	$script:privacyLink = $readXML.Apps.app.userPrivacyLink 
	
	
	$script:contentLocation = $readXML.Apps.app.serverLoc
	$script:installCommand = $readXML.Apps.app.installCommand #"Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $readXML.Apps.app.uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $readXML.Apps.app.detectPath
	$script:detectionPath2 = $readXML.Apps.app.detectPath1 #keep this - important later on!
	
	$script:regPath = $readXML.Apps.app.registryPath
	$script:regItem = $readXML.Apps.app.registryItem
	$script:regItemIs = $readXML.Apps.app.registryItemValue
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $readXML.Apps.app.distributionPointURL
	$script:dpGroupName = $readXML.Apps.app.distributionPointGroupName
	
	
	#Put the variables to the GUI!
	
	$appNameBox.Text = $script:appName
	$appVendorBox.Text = $script:appVendor
	$versionBox.Text = $script:appVersion
	$typeBox.Text = $script:fileExtension
	$appDescriptionBox.Text = $script:appDescription
	
	$script:iconLocation = $script:iconLocation
	
	$userDocTextBox.Text = $script:userDocsText
	$userDocumentationLinkBox.Text = $script:userDocumentationLink
	$privacyLinkBox.Text = $script:privacyLink 
	
	$serverFolderBox.Text = $script:contentLocation
	
	
	$installCMDBox.Text = $script:installCommand #"Deploy-Application-$appName.ps1"
	$uninstallCMDBox.Text = $script:uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$detectionPathBox.Text = $script:detectionPath1
	$detectionPathBox1.Text = $script:detectionPath2#keep this - important later on!
	
	$registryPathBox.Text = $script:regPath
	$regCheckKey.Text = $script:regItem
	$regKeyValue.Text = $script:regItemIs
	#$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$distPointBox.Text = $script:distributionPoint
	$deploymentGroupBox.Text = $script:dpGroupName
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

#FIXME: Not deploying correctly!
<#function Deploy-ApplicationToSCCMCollection
{
	#Nathan the Gr8 
	#https://github.com/NathanTheGr8/SCCMPackageAutomation
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$Collection,
		[Parameter(Mandatory = $true)]
		[string]$ApplicationName,
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Available', 'Required', IgnoreCase = $true)]
		$DeployPurpose = "available",
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Install', 'Uninstall', IgnoreCase = $true)]
		$DeployAction = "Install"
	)
	
	Write-Output "Deploying $ApplicaitonName to $Collection"
	$date = Get-Date
	
	try
	{
		
		$newDeployment = New-CMApplicationDeployment -CollectionName $Collection -Name $ApplicationName -DeployPurpose $DeployPurpose `
													 -Comment "Deployed by PS module SCCMPackageAutomation" -DeployAction $DeployAction -UserNotification "DisplayAll" `
													 -ApprovalRequired $false
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Successful")
	}
	catch
	{
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Failed")
		$listbox1.Items.Add("$_")
	}
}#>


function Deploy-Now
{
	$deployProgress.value = 0
	
	$script:appName = $appNameBox.Text
	$script:appName = $script:appName
	$script:appVendor = $appVendorBox.Text
	
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	#$script:contentLocation = #Set by popup dialog
	$script:installCommand = $installCMDBox.Text 
	$script:uninstallCommand = $uninstallCMDBox.Text
	
	#Get the detection locations for the app from the GUI if it isn't null
	if ($detectionPathBox.Text -eq "" -and $detectionPathBox1 -eq "")
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -eq $null -and $detectionPathBox1 -eq $null)
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -ne $null -or $detectionPathBox1 -ne $null)
	{
		$script:detectionPath1 = $detectionPathBox.Text
		$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	}
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	
	$appVersion = $script:appVersion
	currTime
	$deployProgress.value = 10
	#$siteCode = $script:siteCode 
	$listbox1.Items.Add("$script:currTime Connected to MECM $SiteCode")
	$listbox1.Items.Add("$script:currTime checking if an app already exists")
	
	if (Get-CMApplication -Name "$appName Dev $appVersion" -Fast)
	{
		currTime
		$listbox1.Items.Add("$script:currTime --> Removing existing app")
		$thisCollection = Get-CMCollection -Name $script:dpGroupName #caution: Added for safety to only delete apps from this TESTING distro.
		Remove-CMApplicationDeployment -Name "$appName Dev $appVersion" -Collection $thisCollection
		Get-CMApplication -Name "$appName Dev $appVersion" | Remove-CMApplication -Force
	}
	currTime
	$listbox1.Items.Add("$script:currTime --> Check complete")
	
	#testing to deploy to MECM
	New-CMApplication -Name "$appName Dev $appVersion" -Publisher $appVendor -IconLocationFile $iconLocation -Keyword "$appName,$appVendor" -LocalizedName "$appName Dev" -LocalizedDescription $appDescription -UserDocumentation $userDocumentationLink -LinkText $userDocsText -ReleaseDate $appScriptDate -SoftwareVersion $appVersion -PrivacyUrl $privacyLink # -AutoInstall $True
	$deployProgress.value = 20
	
	currTime
	$listbox1.Items.Add("$script:currTime Added detection clauses and started app creation")
	
	Start-Sleep(2);
	
	#This is the app detection script that goes into MECM
	$MECMDetectionMethodScript = '
		if((Test-Path -Path "$detectionPath1") -or (Test-Path -Path "$detectionPath2") -or ((Get-ItemProperty -path "$regPath" | Select-object -ExpandProperty "$regItem") -eq $regItemIs))
		{ 
			Write-Host "installed"
		}
		else
		{
			
		}
		'
	
	#Send Install methods command with params set above
	Add-CMScriptDeploymentType -ApplicationName "$appName Dev $appVersion" -ContentLocation $script:contentLocation -InstallCommand $script:installCommand -DeploymentTypeName "Install" -UninstallCommand $script:uninstallCommand -MaximumRuntimeMins "45" -InstallationBehaviorType "InstallForSystem" -LogonRequirementType "WhetherOrNotUserLoggedOn" -Comment "Automated Application Deployment - Detection Method - Registry" -ScriptLanguage "PowerShell" -ScriptText $MECMDetectionMethodScript #-AddDetectionClause $detectionrule
	
	currTime
	$listbox1.Items.Add("$script:currTime Added install and uninstall commands")
	$deployProgress.value = 30
	
	
	#Deploy the app to SCCM server and the Software Deployment Team Test Collection
	Start-CMContentDistribution -ApplicationName "$script:appName Dev $script:appVersion" -DistributionPointName $script:distributionPoint -DistributionPointGroupName $script:dpGroupName
	$deployProgress.value = 50
	Start-Sleep(20);
	
	currTime
	$deployProgress.value = 75
	#Deploy-ApplicationToSCCMCollection -collection $dpGroupName -ApplicationName "$appName Dev $appVersion" -DeployPurpose "Available" -DeployAction "Install"
	New-CMApplicationDeployment -CollectionName $script:dpGroupName -Name "$script:appName Dev $script:appVersion" -Comment "MECM Buddy Automated Installer Deployment"
	$listbox1.Items.Add("$script:currTime Sent for distribution and app deployment")
	Start-Sleep(5);
	
	currTime
	$deployProgress.value = 100
	$listbox1.Items.Add("$script:currTime Complete! Go run an Invoke-SilentPolicyRefresh")
}



$deployButton_Click = {
	currTime
	Deploy-Now
}

$buttonImport_Click = {
	#currTime
	Read-XML
}

$serverContentButton_Click = {
	currTime
	$folderbrowsermoderndialog1.ShowDialog()
	$script:contentLocation = $folderbrowsermoderndialog1.SelectedPath
	$serverFolderBox.Text = $script:contentLocation
	$script:serverFolderBox = $serverFolderBox.Text
}

$buttonPickIcon_Click = {
	currTime
	$openfiledialog1.ShowDialog()
	$openfiledialog1.Filter = "Image Files(*.ICO;*.PNG)|*.ICO;*.PNG|All files (*.*)|*.*"
	$script:iconLocation = $openfiledialog1.FileName
	$img = [System.Drawing.Image]::Fromfile($openfiledialog1.FileName)
	$iconDisplayBox.Image = $img
}

$registryButton_Click = {
	currTime
	#TODO: Add browse registry
	#FIXME: Registry
}

$buttonExport_Click = {
	currTime
	Write-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe has been exported.")
}

$buttonHowToUse_Click = {
	currTime
	#TODO: Update documentation and add to GitHub
	Start-Process "https://socarlson.notion.site/MECM-Buddy-272ddf982f3e41a9b018de465427dda5"
}

$buttonBrowseFolder_Click = {
	
	$folderbrowsermoderndialog2Download.ShowDialog()
	$script:downloadLoc = $folderbrowsermoderndialog2Download.SelectedPath
	$downloadLocBox.Text = $script:downloadLoc
	
	currTime
	$listbox1.Items.Add("$script:currTime NEW Download Location: $script:downloadLoc")
	$mbamPathBox.Text = $script:downloadLoc ##DYNAMICALLY UPDATE MALWAREBYTES SCAN FOLDER TO THE DOWNLOAD FOLDER WHEN SET.
}

$buttonStart_Click={
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to start Malwarebytes... Please wait!")
	
	#Set the path to what the dialog box shows
	$script:mbamFolder = $mbamPathBox.Text
	if ((Test-Path $script:mbamFolder) -eq $True)
	{
		MalwarebytesScan -currDir $script:mbamFolder
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime ! Error finding MBAM Folder location !")
		$listbox1.Items.Add("$script:currTime --> If it autofilled from the download folder, try manually selecting a folder using the choose folder button. ")
	}
	
}

$buttonSelectFolder_Click = {
	currTime
	$folderbrowserMBAM.ShowDialog()
	$script:mbamFolder = $folderbrowserMBAM.SelectedPath
	$mbamPathBox.Text = $script:mbamFolder
}


function Update-HashesBox
{
	$hashesBox.Items.Clear()
	foreach ($hash in $script:hashArray)
	{
		$hashesBox.Items.Add($hash)
	}
}

#Needs Evergreen Module
#FIXME: Universal function to get the latest app
#Problem: Sorting by type, architecture, and/or channels logic may not work with more than two param items specified.
function GetLatest
{
	Param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$friendlyName,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$appName,
		[Parameter(Mandatory = $false, Position = 2)]
		[string]$fileExtension,
		[Parameter(Mandatory = $false, Position = 3)]
		[string]$architecture,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$channel
		
	)
	currTime
	
	#Make the directory for the app
	New-Item "$script:downloadLoc\$friendlyName\Files\" -ItemType Directory -Force
	$latestApp = "about:blank"
	
	#$typeBox.Text = $fileExtension
	#This is the logic for what we pass in. It's a good start but can break easily. 
	#In other words, if you pass in something new my logic may break and fail. 
	
	#To add something new,
	#Basically, you'll want to find what you need with Find-EvergreenApp "AppnameHere"
	#Then, based off what it returns, this is how we can refine the results to find the 
	#   exact download URL for the latest app (using where-object to sort the list Get-EvergreenApp returns.)
	
	#Friendly name is what we use to name the file, so PSTK can grab the name and run
	#Also, we want to keep it consistant with what is in our registry under 
	#HKLM:\SOFTWARE\MECM\$appName
	
	#Dynamic FileExtension Installer (Will probably break if they rotate between .msi and .exe)
	if ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($architecture)))) #How to check null or empty: https://stackoverflow.com/questions/45008016/check-if-a-string-is-not-null-or-empty
	{
		#Gave us file extension and architecture
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($channel))))
	{
		#Gave us file extension and channel
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Channel -eq $channel }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($architecture)))
	{
		#Gave us who knows what, but we have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Architecture -eq $architecture }
		
		#We still need the file extension.
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($channel)))
	{
		#Gave us who knows what, but we know we at least have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Channel -eq $channel }
		
		#We still need the file extension
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($fileExtension)))
	{
		#We know we at least have the file extension.
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	else
	{
		#Generic, user does not care about type or anything, so we need to get the file type for when we save it later!
		$latestApp = Get-EvergreenApp -Name $appName
		
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	
	#$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture}
	#$fileName = Split-Path -Path $latestApp.Uri -Leaf
	#[string]$fileExtension = (Get-Item ".\AutoDownload\$appName\Files\$fileName").Extension #get current downloaded file extension
	currTime
	$listbox1.Items.Add("$script:currTime Downloading to: $script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension")
	
	currTime
	#Get hashes
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	Update-HashesBox
	
	currTime
	$listbox1.Items.Add("$script:currTime $friendlyName MD5: $hashMD5")
	$listbox1.Items.Add("	 $friendlyName SHA256: $hash256")
}

#Airtame Downloader (It's not in Evergreen - this is how you do it if it isn't in Evergreen)
function GetAirtame
{
	#Make directory
	New-Item "$script:downloadLoc\Airtame\Files\" -ItemType Directory -Force
	
	#Get the latest file, put in directory
	Invoke-WebRequest -Uri "https://downloads-website.airtame.com/get.php?platform=win&msi=true" -OutFile "$script:downloadLoc\Airtame\Files\Airtame.msi"
	
	#Try to check hashes
	if ((Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA512).hash -eq "C9134235687349A6FF3A353F6FA6E055D401302C71413B32042A9AB2BA07329FA26EE376194DFE1A2797D3015B65A6B37A7E8E5AED3578FC6C3B5A91BED1D506")
	{
		Write-Output "Hooray! Airtame matched hashes I got on 1/28/2022"
	}
	currTime
	
	#Get hash
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	currTime
	$listbox1.Items.Add("$script:currTime Airtame MD5: $hashMD5")
	$listbox1.Items.Add("	 Airtame SHA256: $hash256")
	Update-HashesBox
}

$APPSdownloadBTN_Click={
	$listAppsDownload = $downloadAppList.CheckedItems
	$script:downloadLoc = $downloadLocBox.Text
	
	if ($downloadLocBox.Text -eq "")
	{
		$listbox1.Items.Add("$script:currTime ! Please select a download location ! ")
	}
	else
	{
		
		foreach ($app in $listAppsDownload)
		{
			if ($app -ne $null)
			{
				$listbox1.Items.Add("$script:currTime Downloading $app")
				#Now that we have shown the user what we are going to do, let's do it!
				if ($app -eq "Airtame")
				{
					GetAirtame
					$listbox1.Items.Add("$script:currTime Airtame has been downloaded.")
				}
				if ($app -eq "Office 365")
				{
					GetLatest "Office" "Microsoft365apps" $null $null "Current"
					$listbox1.Items.Add("$script:currTime Microsoft Office 365 has been downloaded.")
				}
				if ($app -eq "Tableau Desktop")
				{
					GetLatest "Tableau Desktop" "tableauDesktop" $null $null $null #heads up! This may switch between .exe and .msi
					$listbox1.Items.Add("$script:currTime Tableau Desktop has been downloaded.")
				}
				if ($app -eq "Tableau Prep")
				{
					GetLatest "Tableau Prep" "tableauPrep" $null $null $null
					$listbox1.Items.Add("$script:currTime Tableau Prep has been downloaded.")
				}
				if ($app -eq "VLC")
				{
					GetLatest "VLC" "VideoLanVlcPlayer" "msi" "x64" $null
					$listbox1.Items.Add("$script:currTime VLC has been downloaded.")
				}
				if ($app -eq "Zoom")
				{
					GetLatest -friendlyName "Zoom" "Zoom" "msi" $null $null
					$listbox1.Items.Add("$script:currTime Zoom has been downloaded.")
				}
				if ($app -eq "Zotero")
				{
					GetLatest "Zotero" "Zotero" $null $null $null
					$listbox1.Items.Add("$script:currTime Zotero has been downloaded.")
				}
			}
		}
	}
	
	Update-HashesBox
	
}

$PSTKdownloadBTN_Click={
	Start-Process "https://socarlson.notion.site/PSAppDeploymentToolkit-6abd5a3a72784d408399cc9eaf5077e5"
}

$buttonSaveLog_Click = {
	$folderBrowseLog.ShowDialog()
	$logFolder = $folderBrowseLog.SelectedPath
	
	$currDate = Get-Date -Format "yyyy.MM.dd-HH.mm"
	$logFile = "$logFolder\MECM Buddy $currDate.txt"
	New-Item $logFile -Force
	
	foreach ($item in $listbox1.Items)
	{
		#How to log: https://www.spguides.com/powershell-create-log-file/
		#$msgToLog = $message + ' - ' + (Get-Date).ToString()
		Add-content $logFile -Value $item
		
	}
	$listbox1.Items.Add("$script:currTime Finished logging to $logFile")
	Invoke-Item -Path $logFile
}

#old VirusTotal code:
<#
## Search VirusTotal for a file hash
## Chris Shearer
## 26-Aug-2020
## VirusTotal Public API: https://developers.virustotal.com/reference#file-report

#TODO: Add save/load for API Key!
Function get-VTFileReportOld
{
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## Get your own VT API key here: https://www.virustotal.com/gui/join-us
	if ($vtAPIbox.Text = "")
	{
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("Hash: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			$curHash = $hash
			$curSample = $samples
			
			$listbox1.Items.Add("Samples: $curSample $curHash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}
#>

#You need your own API key to use VirusTotal reporting (free - rate limited)
#more info here: https://www.virustotal.com/gui/join-us
Function get-VTFileReport
{
	#You need your own API key to use VirusTotal reporting (free - rate limited)
	#more info here: https://www.virustotal.com/gui/join-us
	
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## You need your own VT API key here: https://www.virustotal.com/gui/join-us
	currTime
	
	if($vtAPIbox.Text -eq "") #($vtAPIbox.Text.ToString() = "")# -or ($vtAPIbox.Text -eq $null))
	{
		#You need your API key to use this module.
		$listbox1.Items.Add("$script:currTime --> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text.ToString()
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "$script:currTime No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("$script:currTime VT Hashes: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			currTime
			$listbox1.Items.Add("$script:currTime --> Now sampling: $hash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			##TODO: Potential API version 3 update needed? Using V2 right now because they have hashing
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			Start-Sleep(2)
			## Calculate percentage if there is a result
			currTime
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("$script:currTime Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
				#ADD TO GUI
				$listbox1.Items.Add("$script:currTime Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			currTime
			$listbox1.Items.Add("$script:currTime Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			
			currTime
			$listbox1.Items.Add("$script:currTime Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("$script:currTime End of VirusTotal. ")
}


$buttonCheckHashes_Click = {
	if ($script:hashArray.Count -eq 0)
	{
		currTime #Sorry this is annoying to always get the time
		$listbox1.Items.Add("$script:currTime ! The list of hashes is blank ! ")
		$listbox1.Items.Add("$script:currTime --> Did you download anything yet? ")
	}
	else
	{
		Get-VTFileReport -h $script:hashArray
	}
}

$buttonBrowse_Click={
	$openfiledialog2.ShowDialog()
	#$script:installFileLoc = $openfiledialog2.FileName 
	$script:installFile = Split-Path $openfiledialog2.FileName -Leaf
	$appInstallerBox.Text = $script:installFile
	
	#GET VERSIONING DYNAMICALLY IF POSSIBLE
	if ($script:fileExtension -eq "msi")
	{
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		$newAppVersion = Get-MSIVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
	}
	else
	{
		#must be EXE 
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		#$newAppVersion = Get-ExeVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
		#Get the EXE version and RETURN the version in script.
		$appVersionTemp = (Get-Item -Path "$folder\Files\$file").VersionInfo.FileVersion
		
		#If what we have isn't null, then return that new variable from the file
		#If this fails, it's probably because of this check or a file change from the makers of the file. 
		#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
		if ($appVersionTemp -ne $null)
		{
			$newAppVersion = $appVersionTemp
		}
	}
	
	$title = 'App Version'
	$question = "Should I update app version to $newAppVersion?"
	
	$choices = New-Object Collections.ObjectModel.Collection[Management.Automation.Host.ChoiceDescription]
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&Yes'))
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&No'))
	
	$decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
	if ($decision -eq 0)
	{
		$script:appVersion = $newAppVersion
		$listbox1.Items.Add("$script:currTime --> Dynamic Version: $script:appVersion")
	}
	else
	{
		$listbox1.Items.Add("$script:currTime --> No dynamic change in app version. ")
	}
}

$appNameBox_SelectionChangeCommitted={
	#currTime
	Read-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe selected.")
}

$buttonInstallModules_Click = {
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to install modules.")
	
	currTime
	$listbox1.Items.Add("$script:currTime --> ConfigurationManager module")
	Import-Module -Name "ConfigurationManager" -Force
	
	currTime
	$listbox1.Items.Add("$script:currTime --> Evergreen module")
	Import-Module -Name "Evergreen" -Force
	
	currTime
	$listbox1.Items.Add("$script:currTime Done working on modules")
}

$intuneFolderBrowser_Click={
	$folderbrowsermoderndialog3IntuneApp.ShowDialog()
	$script:intuneAppFolder = $folderbrowsermoderndialog3IntuneApp.SelectedPath
	$intuneAppFolderBox.Text = $script:intuneAppFolder
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune App Folder: $script:intuneAppFolder")
}

$IntuneBrowseFile_Click = {
	
	$openfiledialog3intuneScript.ShowDialog()
	$openfiledialog3intuneScript.Filter = "PowerShell Scripts(*.ps1)|Installer Files(*.exe;*.msi)|All files (*.*)|*.*"
	$script:intuneAppScript = $openfiledialog3intuneScript.FileName
	$intuneAppScriptBox.Text = $script:intuneAppScript
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune App Script: $script:intuneAppScript")
}

$intuneOutputFolderBrowser_Click={
	$folderbrowsermoderndialog3IntuneApp.ShowDialog()
	$script:intuneOutputFolder = $folderbrowsermoderndialog3IntuneApp.SelectedPath
	$intuneOutputFolderBox.Text = $script:intuneOutputFolder
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune Output Folder: $script:intuneOutputFolder")
}

$intuneButtonPackageIt_Click = {
	if ((Test-Path ".\IntuneWinAppUtil.exe") -eq $true)
	{
		if ($checkboxBatchCreation.Checked -eq $true)
		{
			$subFolders = (Get-ChildItem -Path "$script:intuneAppFolder" -directory).Name
			foreach ($folder in $subFolders)
			{
				$subAppFolders = (Get-ChildItem -Path "$script:intuneAppFolder\$folder" -directory).Name
				if ($subAppFolders -eq $null)
				{
					$listbox1.Items.Add("$script:currTime --> $folder folder missing PowerShell App Deploy Toolkit Files or Folders (\AppDeployToolkit and \files)")
				} 
				elseif ($subAppFolders[0] -eq "AppDeployToolkit" -and $subAppFolders[1] -eq "Files")
				{
					currTime
					$listbox1.Items.Add("$script:currTime --> Found AppDeployToolkit and Files subfolders for $folder")
					$listbox1.Items.Add("$script:currTime --> Generating $folder .intuneWin file... Please wait!")
					
					##FIXME: TODO: There's a potential issue where the user enters a name of a PowerShell file and I just use the foldername in the format Deploy-Application-$folder.ps1 instead of their name. 
					##This could be unexpected behavior so it's something to watch out for and improve upon in the next release. d
					Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder\$folder -s $script:intuneAppFolder\$folder\Deploy-Application-$folder.ps1 -o $script:intuneOutputFolder"
					
					currTime
					$listbox1.Items.Add("$script:currTime --> Finished creating .intuneWin file")
					
				}
				$listbox1.Items.Add("$script:currTime    ----NEXT ITEM----   ")
			}
			$listbox1.Items.Add("$script:currTime Finished IntuneWin package creation")
		}
		else
		{
			currTime
			$listbox1.Items.Add("$script:currTime Creating .intuneWin file...")
			
			Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder -s $script:intuneAppScript -o $script:intuneOutputFolder"
			
			currTime
			$listbox1.Items.Add("$script:currTime Finished creating .intuneWin file")
			
			#(Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder -s $script:intuneAppScript -o $script:intuneOutputFolder" -Wait -Passthru).ExitCode
		}
		
		#Open the output folder. 
		if ($checkboxOpenOutputFolder.Checked)
		{
			Start-Process $script:intuneOutputFolder
		}
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime You need the IntuneWinAppUtil.exe to package this app.")
		$listbox1.Items.Add("$script:currTime By continuing, you have read and agree to: `n Review the Microsoft License Terms for Microsoft Win32 Content Prep Tool. `n Print and retain a copy of the license terms for your records. `n By downloading and using Microsoft Win32 Content Prep Tool, `n you agree to such license terms. `n If you do not accept them, do not use the software.
    `n Review the Microsoft Intune Privacy Statement `n for information on the privacy policy `n of the Microsoft Win32 Content Prep Tool.")
		$listbox1.Items.Add("$script:currTime More information can be found here: https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool")
		
		#Start-Sleep(10)
		Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
		Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
		Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
		
		Start-Sleep(2) #user already agreed with the agree button to get to this point. 
		#$listbox1.Items.Add("$script:currTime If you have read and agree to these terms, `n click Package It! to continue. Otherwise, stop using this tool immediately. ")
		
		Invoke-WebRequest -Method GET -Uri "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/raw/master/IntuneWinAppUtil.exe" -OutFile ".\IntuneWinAppUtil.exe"
		
		Start-Sleep(5)
		
		#VirusTotal Scan the new file
		#Create temp hash array
		$PrepToolHashArray = New-Object -TypeName System.Collections.ArrayList
		
		#Get file hash
		$hash256 = (Get-FileHash -Path ".\IntuneWinAppUtil.exe" -Algorithm SHA256).hash
		
		#Add hashes to an array to send to VirusTotal
		$PrepToolHashArray.Add($hash256)
		
		#Scan with VirusTotal
		get-VTFileReport -h $PrepToolHashArray
		
		#Open where it downloaded to. 
		if ($checkboxOpenOutputFolder.Checked)
		{
			Start-Process ".\"
		}
		
		$listbox1.Items.Add("$script:currTime Download and scan complete for Microsoft Win32 Content Prep Tool")
		#Start-Sleep(10)
		
		
	}
	
}

$labelBeforeYouInstallAndT_Click={
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
	Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
	
	
}

$buttonAgree_Click = {
	$listbox1.Items.Add("$script:currTime User clicked agree - They read and agree to the terms and conditions and privacy notice. ")
	
	$intuneFolderBrowser.Enabled = $true
	$intuneBrowseFile.Enabled = $true
	$intuneOutputFolderBrowser.Enabled = $true
	$intuneButtonPackageIt.Enabled = $true
	$labelThankYou.Show()
	#user already agreed with the agree button to get to this point. 
	
	#Check and download IntuneWin32Packager
	if ((Test-Path ".\IntuneWinAppUtil.exe") -eq $false)
	{
		currTime
		$listbox1.Items.Add("$script:currTime You need the IntuneWinAppUtil.exe to package this app.")
		$listbox1.Items.Add("$script:currTime By continuing, you have read and agree to: `n Review the Microsoft License Terms for Microsoft Win32 Content Prep Tool. `n Print and retain a copy of the license terms for your records. `n By downloading and using Microsoft Win32 Content Prep Tool, `n you agree to such license terms. `n If you do not accept them, do not use the software.
    `n Review the Microsoft Intune Privacy Statement `n for information on the privacy policy `n of the Microsoft Win32 Content Prep Tool.")
		$listbox1.Items.Add("$script:currTime More information can be found here: https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool")
		
		
		Invoke-WebRequest -Method GET -Uri "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/raw/master/IntuneWinAppUtil.exe" -OutFile ".\IntuneWinAppUtil.exe"
		
		Start-Sleep(5)
		
		#VirusTotal Scan the new file
		#Create temp hash array
		$PrepToolHashArray = New-Object -TypeName System.Collections.ArrayList
		
		#Get file hash
		$hash256 = (Get-FileHash -Path ".\IntuneWinAppUtil.exe" -Algorithm SHA256).hash
		
		#Add hashes to an array to send to VirusTotal
		$PrepToolHashArray.Add($hash256)
		
		#Scan with VirusTotal
		get-VTFileReport -h $PrepToolHashArray
		
		$listbox1.Items.Add("$script:currTime Download and scan complete for Microsoft Win32 Content Prep Tool")
		
	}
}

$buttonReadPolicies_Click={
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
	Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
}

$checkboxBatchCreation_CheckedChanged={
	#TODO: Place custom script here
	if ($checkboxBatchCreation.Checked -eq $true)
	{
		$labelFolderWithSubfolders.Show()
		$labelFolderNameDeployAppl.Show()
		$intuneBrowseFile.Enabled = $false
	}
	else
	{
		$labelFolderWithSubfolders.Hide()
		$labelFolderNameDeployAppl.Hide()
		if ($labelThankYou.Visible -eq $true)
		{
			#User agreed to terms. Can show the button. This is a really minor GUI glitch but it bugged me so HA!
			$intuneBrowseFile.Enabled = $true
		}
		
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>