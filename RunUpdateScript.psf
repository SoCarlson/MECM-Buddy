<File version="3.2">
  <FileID>dae19541-b548-4204-90b3-b023969caa1b</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAH9zSURBVHhe7f1ncBv5uiZ43i8z2xMxO1/2w3zp
2YmZjdjt3dntjb23+/a1be657tg6pupU1SknU1LJS6RE0XvvKVqRovde9N57770FARAk6L0oidSz
/0yQcgVVSVTRQHx+EW8QCWQmEiCJ90mLPyMiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqKj4P0//Jt/U/Hxxx9XuLp6VDg5uVY4slgsFovFMqhy
cnGrsHNwrPh//T//XYXo7VL9sP/Tf//ft9y5a4aatgH0KZb2apHFYrFYLJYBVf/UEnonF/AwvxT/
4S/+HHtt/s1+97vfVVS3DqBpUIOK9jEWi8VisVgGWaOo7BhH1+QSQsKifjwAuLp6VgyqVlHZOY7q
rgkWi8VisVgGXM1Ds6isa/vxAODi4lYxMr0qT1TbPclisVgsluFUzyQa+pRo7P9pqkFUXY9CnvdP
OV+pDnu++9U6okVJZcOPBwDpoD8pANR0K+SZ6GakQFXnhFzVXZNy7Q+/XNL9+9OwWCwWi3W0NYU6
0a/yqnuQVd6J7Ir3K2keuZXdqBW9rb53Cvk1vT/ZfHMqu1At+qY034LaPnFfh95x36V0y9aFqo5x
eb7770vb6NzBAoDU/JtEouibmJWrf1qDYc3C8+GXq2tU8/wJWSwWi8U6ymoaUOFhWQcyCpuQX9WN
vKqu96p8UVklrXhY2i6HivSCJhRUvzTfyk55uKRhAKWipJ8vV2njoPxTmo807svzzS5rQ0Zxmxwq
0vIb3zxfMY+i2l7d9KKK6vpezFeaZm++0jylyilvR4qY38EDgGYNtSJJSTOoEcmnb3IW+/xuxaEk
t3xv6FUbjx6L6RTydCwWi8ViHWU1D6qRWtCMipYhedP36/vCD1I1Ym06o7gVmSIElDYOyA11/zFp
BblMPFdUWgnCkwsRkVL0SoUnFSIhuwpVneNyL92frkpUnRjOKJLm24Hi+j7U9Yr5ylvSxXN2T6Ci
bRTRGWUIS8gXAaQVjf0qUWpklDSL+/IQl1mOqvZR3Xyl6fa2xNeL5UvJa5SXc/99aR+bf7cAIG1K
kSaUZj6oXNhr8c8QciYMyX81iJ3t3b37Xljb3H4eABrEgkoLvL8Az4f7lPL+Dmkh5RKPNQ6oxX1S
WhHjSY9/b1rphb8Yfnke0rjy7f3HXi95fi9NK6qhT/XD07xSSrF8mlefX7pvb1j6hTQ8v5/FYrFY
x1VSAEgXTbWiZVhuzlL/et+qFc37YUkbsso6UCbWvKWV4/1d4Y2DGjwQzTg3pxjd3f0YHBzBwMDw
Xo2go6MHsfHpSM6vFz1H/Xy6KlH1IqBkSvMt70RJfb8cWKRN91JJfS0iuQh5eSVobe2Cr38kYjIr
RVXgfniiuK8T6Rl5CInNEa9b9Xy6yvZx1In5pIkQdOAAMKpZFxPpmqzcLLvGMDOyDA3m0TQeg9T/
fQDDnz7Gztazvdavs7b5RKQYqaFPo6i4BFkVnWganJbfpKrGJpGimtDQM4as/CJk5pcjp0wspGiu
NU0deJhfgsy8MhQ3DaGkogIPy9rkUxGl5lvd1IKMgjrUy8FAVPcIsvOLxfhimuJ61PSo0SSes1Fu
9rrwIC1309AsmnvHkFfRJH5pYliM0zKiRUVDK4oaBtEyNCO/Rnme8jS6MKK7rdyb5xRKq2qQLZa1
vl8sj3y/StxXh/TsAuRUdMivV/desVgsFuu4qmVoWl5brxQBoK57CrVdir0SDbdHPD44I1fzayXf
J3rN/rgvphMl1qqlXQBSo64Q/alBNFxp3lK1DmlxPyYbavU0Hj9+gp6efvT2DaK3dwD9IgRI6upb
EJVaKj/P/nRSNYggIQcLMd+yhgF5ZVXa9V4jnrN5cBZh8floaGiR57G+tg43r/sIDInF9qNH8n1F
RRXwvp8o9ynpuAcpQNSIklZIpQAgNf7996VjfEH0rMZ3DwDShA9SM+H370sxPghkDjeg8DdtaP2z
dag/24Sqaho9Zd1o72zHtlgoaTqpceflZiAqKR+1omm2DiqRk5WO2Kxq1Hf0I6OwBg2DWjSLBlzf
0Yf0h0Uoa58QzVU6iFCJ/IJsRCVmo7pPI36hKuTlZCImvVQ0YNGQpWYrpskoqBINXovcgkLk1Q2g
rnNUhA+xVt81iuqOCfm4hbL6NhSJ1JOWV4HaPvHmi+curm1HTlEZcis7UNMxIgKDePM6h0VyGpOb
f03bIKo7J8X0U6hqH0Z1i3iu7AwkZ1ehfmBWfrNrWzuQkVuFuj7xhyFCQHGLeD4RCvbfbBaLxWId
fe0HgKrWEbnh7zdbaS25rHlYNOISec06Mrn4lZI21Sfn1u6N/2I6qaRA8DwAiHlIa/JSn5KqdXgO
oXG5UCnVqKish5GFB7yCE+AVkggjczcop8S4dc26ACBWSPenk6pB9Kv9+UoBoFGstMoHMUpbtsVj
0i4AZ68HaGvrlhv++vo6tra25Ns1tc0ws/VGfk2XWB7ddNKWCamaxPvwXgFgfHZDXituEg2xW7GE
sPQ0uP6vhej/NRD6vxYj6X9qxMi/3cDkf7eM7j/rR9OfVaPlz8rg/2UgqsYmxJsyg6KKSqRmFYo1
+jE0dfYhMydfrNW3oLFrCBk5hSiobpdfYFlFFR5WdKF1dE5urtK0xZXVYtp8FDaOoKl7AA9zCpBZ
Ui+atUYODc09unkUVjbhYX6VCBkK5BeWo6JLNPD6JuRUiTe0tgHZYpqisgokZpejvnsM2XklKBIB
IC0zB/ni+XMKK1HTN43i0nIUNAzJB0qU19Qhu7Jb97xi3g1D82jo7ERGni60tAzPoqquST7isn1i
HkWlpSioGxLLrZHfLxaLxWIdT7WNzIhe0Y6qtjG5UUuNX6rWkTmxRp2H4qJydHb2or1drLS+VNKm
+ujYNNGj2uVGvT+dXCIESE06R/SFipYR0Runnz/WNjovz3d0ZBSlZdVIzm9Ar2od/ZpN0fSLMTQ4
JIJBHaLTy0Xv0L4yX2lrsrRbQZqvtGuhSfRcaQVaatzSGn3biBaFdX0wtXTH+PgEtrcfyTU4OIwr
N62RXtIk9yPdNCJU7FVzvwrpRaLXip/774t0IaC3DAAuFZNzWyJJiTV3UQPTawiIT4D5/xCNfqdH
CLqSjpr/ox+K/3EDmv/LIp7+4jHwj4D2d5Moz6hB87gG7aOzIgBUo7imFQUVTSiuFiVu51U0i+Y9
gszcIhTXdYo17XGUiwCQXd2DDtFMpebfMaoVAaBGrKmLacsbUVLdLE+bW1aPpsFZ+U1p7dXNo6S+
CwWlNShrHRCNuAbVvTNoaO5AvggGuUVVqBmcR9fQOHJK61BRI4KBCBrd6g1xuw5F4g2vFCFBCgR5
pbXy2r0075beQeSWNojnbRCNvR+dE4to7GhHZn4tmofnxXIuora+UYSELnRNLaKkrAyFDSNiuWfl
94vFYrFYx1OdY3NirbrjewFAatSBEekYHhzEztPH2NrceKWAXWRlFyI+u0b0vtcDgELuHblVPW8M
AF2d3cjOKYKTTzQSxDwSc2ph7x4mgkUnCgpKEZNR8f0AIJp1tggWedW9ugAgVoB1j0lr7Sp5V4BX
YBxKS6uwtLiAoaFhjI2NYWFhTixrAVz9IuXjHHTHob0IAU2i8UsHF7YMihXqvfelb2oFZaIP77X5
N5MCgGLhkXhhs3Ij71OtijXoUiRfK0b91CaKN7Xo/dkEpv/NKrazRPPfIx0N8FRU28gsOsdFcikt
Q1XXFMqK85CYW4fm3mFklzaipWcYWWLNvH1iWaSSRTR39SA9pxR14k3tGFGLN1+NovJKVHZOoqJM
OoKyGs19o8guFr8YkeI6xufR3jeMh8W16FCsoqqmVryB7Sgsq0JltxKVFZXil9WM/JIylHUq0dbd
g7T8CtQ0iyZeVIeOyQUUFBchXzTt9v5BpKZlILemF51iWdpF+Oia1KKktBiJGUWoG5hBl2j4zZ3t
8haAtvEFNPaMoba1C1mFtWgZVSKvsAzVPdPya5beLxaLxWIdT3WLz3dpbb36tQAgNfXUgga4ed+H
m1eI3rJ3DUBeTbdY0Zx5Pp1cosnmihU+6XQ9KQA0iV4lHQcgVbsIANIugJbmFigUCpSVVaK8vEr8
FP1IrMjOz8+JYFCI2PRysYKrfT6dVFIAkIJFfm0fypqG0DyokZdZKumgvaiUYmRl5eHRow25+VvZ
e8HZzR8T4+PyfQmJ6QiNz5VXXKXdB1JoqBfVLNb4pdMLpV68/74MqNfeLgA4igCgXHwsGu2caGpz
aBUzmZhdk5v8lEhJ30XkoPW/G8XT7B35vpdtPHoiFlw0UbE2X9nYKq9VN4tkVNo8gq4RBUoaxJr+
sBL5xaXILalGQWUr2iaW0NjehZzCcrHmLdbiuyZRLdbi66RjB7p7UdI4hK4xlVjb75DflK6JBTGv
KRSIBp9TXIWc8ma0il9CkwgS0ib9fDHf8rYJtPYPI1c05/zyWnlzv7SFoaK6FjklteJ5qlHZpcSQ
Sit+OXmo6J5Gj2Jefr1dimU0tbYir6pDhIIlOaS0iaBQVC3W+CfnxZvYIC9bbWMTHopkVyp+cV2K
RXlaFovFYh1f9SqX5KZavXdMl3wQ+15jbBqaQVnrCLIrO75fFWIlsr5XPohd14R108nVoxD9oBuF
tf2olALAwMuNegGRyUUID49FcXGZWFuvQEnJXonbxcXl8LsXiqTcGnk3xP50UjWJeUvBorCuH+Wi
j7QO644xk0ra0iyd5hcREYeiolLYOnrjfly2fLqhh3cISkvKERwcieDoh3Jf3J9OOkZOWvPPFAGg
Y+zF+zI0s4Hymua3CwCq5Sei2S3IaUpa4x6fXd1r8UDEf4zClK9yb+hVjx7voFM0Wmm6HsUSeuSf
y+idWhL3Lcr36X4uyiFBKmncXuWyPK7U3KXH5GkVunnophW3937q6sU8pPvlaaSf8nji+faHxTyk
cfefX/4ppulVrohx5lHT2Ijc8la56evG1ZU07f7zyrU3v/3HpOfTv1wsFovFOq7qV6/IV+6r65yU
9+VLzfp5iTVs6T5pTVxfSZvopSP1X5lmYAbNolkXVPeiqH4ANe3j8taE/cel29KBgtKBhV7BifAO
SXqlPIMSEBiViSoRSKT5vzzvVrE8+VU9KG4YQFXrqNzIpflJJV26VwofEcmF8LmfhIScKnl/f7fo
VZllrfALS0FIzEOUi0DTJoKFPJ14XPrZIVbas0rb5X66/76MaLfePgBMr+y8aIKi2Y1qVsXa/VO5
GhraMKZVYmNbN/xyLaxtP2+OJ7pE4OhVzKG+YxBtIsH1q3QhhcVisViGW4OaNREAelDfNSk+40X/
kprge1SPWHFsFWvV+SIAFDcMygGgTzzP83HECrL0PAOqVfnnm+rleUrVI6pjeAZ5YlmLG4bkLQvy
fMd185RKeu5B1ZqY9xr6xUqrtIIrPS7dHlSv6p5TjLM//v68u0a1eFjS/ryHSzU2v42K2pa3CACO
LhWa1V30KVflJ5KqT1pjltasRY0vPBZv8sbz4ddrf5qTX6sY0mzKb6T+x1ksFotlSDWoXkOLWLvO
LutEbkU38n6CyirtRGOfGh2jc2K+XfrnKxr5D9fr40vz7UB9txJdonnnlHe/Yb5SvZj++Tj78927
b7+kYWl5q9snMDitCw5STSw8ffsAMLP2TD5oYGAvZfSzWCwWi3XCS1pxHZhel2/3Tkkrru9funlK
/VA01J98vut7813TO85BSlph338P5B4uanJpB5V1bxUAnCqkY/4G1WLBxAwmtBtYXNmAdmEFc4ur
B6ul46v5pbVTWwvL68da0t/NsdXq6a2l1c1jreW1rWOrlfVHp7c2jrdWN7aPtdY2H79aW68NH6T0
zeOEzXd968n3amP7CeZXH8k9XNoqoljaReXbbQF4EQCkBKGc38SjzQ2srCxjbXXlQLW+tnpstbG+
dmprc2P9WOv1c22Psh5tib/bU1rbj7aOtR5vPzq2evJ4+9TW0yePj7V2nj451trd2Tk19Wz3pXq2
K36+WtKJ+dKX80k9/L0CwJQIAJsbG1heXhYhYOVAtbq6emy1trZ2aku6dORx1ob4uzmu2twUf7en
tKTLhR5nPXr06Nhqe3v71Nbjx4+PtZ48eXKs9fTp0w++dnakq+1IV9159Xt4pBCwI4LBfknD0hYF
BgA9jfG0lL6mfJSlrzEfVelrjKel9DXloyx9jfmoSl9jPC2lrykfZelrykdZ+hrmh1TSmr9YvceI
ehn+ub2wimuBc2qHfME6qelLjzEAvFb6GuNpKX1N+ShLX2M+qtLXGE9L6WvKR1n6GvNRlb7GeFpK
X1M+ytLXlI+y9DXND6V2pTX/ZzsoalfiN47F+I/GWfjzW5n4C6OH+AeLfITk9+PR46fPtwQwAOyV
vsZ4WkpfUz7K0teYj6r0NcbTUvqa8lGWvsZ8VKWvMZ6W0teUj7L0NeWjLH2N80MpaZP/kGoJv3Io
wn8QTf/vTXPxn8109Vd3svGXxg+R2TApjycfI8AAoCt9jfG0lL6mfJSlrzEfVelrjKel9DXloyx9
jfmoSl9jPC2lrykfZelrykdZ+hrnh1D7+/29s3rlNf+Xm/9+Sfef96/B0vojeVwGgL3S1xhPS+lr
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
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERO/nz/7s/w9B/Rz7
/UTVTAAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.203
	 Created on:   	4/29/2022 1:37 PM
	 Created by:   	Sophie Carlson
	 Organization: 	
	 Filename:     	RunUpdateScript.psf
	===========================================================================
	.DESCRIPTION
		This project aims to simplify the process of downloading, deploying apps, and running scripts in MECM/SCCM.

		Inspiration: 
		I was tired of constantly clicking buttons in MECM, as well as downloading a bunch of installers. 
		So, I decided to start automating MECM downloads and installs. I wanted to check hashes and 
		make sure files were legitimate, as well as run scans on VirusTotal and through out 
		installation of Malwarebytes Nebula.  

		Then, once I got an app downloaded and deployed, it could take hours for MECM to update.
		So, I decided it would be quicker to make my own deployment scripts and a way to invoke them without the 
		laggy GUI.

		HOW TO USE GUI: 

		Connect: Pretty basic, enter your site code and domain to connect to. Once you click connect,
		it will prefill the scripts and deployment groups into the GUI. There's a button to try
		to install the modules if you don't have them already. 
		
		Download: Select a download folder, select what apps you want, then click download. It downloads
		and saves the hashes to an array. You can use Malwarebytes Nebula (if you have it) to scan the files.
		If you want to use VirusTotal, you need an API Key for free from here: 
			https://support.virustotal.com/hc/en-us/articles/115002100149-API
		
		Deploy: Can import and export settings to an XML file under .\Recipes from where you are running the script.
		It needs some improvements on the detection methods, but it works pretty well. 

		Scripts: Select a script and a group, click run and then it will be run on the collection you specified. 
		
	

		FINAL THOUGHTS, LICENSE:
		This project is still in a very basic stage, so please contribute to it. 
		
		NOTE: You must keep the license and my name in the code. I'm a college student who 
		worked really hard on this and I would really appreciate the recognition. 

#>



$buttonRunScript.Enabled = $false
$connectProgressBar.Hide()
$scriptProgress.Hide()
$runScriptsTab.Enabled = $false
$deployTab.Enabled = $false

$script:hashArray = New-Object -TypeName System.Collections.ArrayList

function currTime
{
	$script:currTime = Get-Date -Format "(HH:mm)" #"yyyy.MM.dd-HH.mm"
}

currTime

$formMECMBuddyV10_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formMECMBuddyV10 -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-Scripts
{
	#adds scripts from MECM to dropdown windows
	$scriptsDropdown.Items.Clear()
	$scriptsList = (Get-CMScript -Fast).ScriptName | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$scriptsDropdown.Items.Add($s)
		}
	}
	
	#Try to fill in appNameBoxCombo
	$currentPath = Split-Path $script:MyInvocation.MyCommand.Path
	$currentPath += "\Recipes\"
	$listOfAppNames = (Get-ChildItem $currentPath).Basename
	
	foreach ($name in $listOfAppNames)
	{
		$appNameBox.Items.Add($name)
	}
	
}


function Get-Groups
{
	#adds deployments from MECM to dropdown windows
	
	$DeploymentGroupDropdown.Items.Clear() #clear on scripts tab
	$DeploymentGroupBox.Items.Clear() #clear on deploy tab
	$scriptsList = (Get-CMCollection).Name | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$DeploymentGroupDropdown.Items.Add($s) #add to script list
			$deploymentGroupBox.Items.Add($s) #add to deploy list
		}
	}
}


function Get-ExeVersion()
{
	#Version 1.1
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = ".\Files\$appInstallerName"
	)
	
	#Get the EXE version and RETURN the version in script.
	$appVersionTemp = (Get-Item -Path $appInstallerPath).VersionInfo.FileVersion
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $appVersion
	}
}

function Get-MSIVersion()
{
	#Version 1.0
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = "$workingDirectory\$appName\Files\$appName.msi"
	)
	
	#Stack Overflow
	#https://stackoverflow.com/questions/8743122/how-do-i-find-the-msi-product-version-number-using-powershell
	#Original blog: https://winadminnotes.wordpress.com/2010/04/05/accessing-msi-file-as-a-database/
	try
	{
		$FullPath = (Resolve-Path $appInstallerPath).Path
		$windowsInstaller = New-Object -com WindowsInstaller.Installer
		
		$database = $windowsInstaller.GetType().InvokeMember(
			"OpenDatabase", "InvokeMethod", $Null,
			$windowsInstaller, @($FullPath, 0)
		)
		
		$q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
		$View = $database.GetType().InvokeMember(
			"OpenView", "InvokeMethod", $Null, $database, ($q)
		)
		
		$View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
		
		$record = $View.GetType().InvokeMember(
			"Fetch", "InvokeMethod", $Null, $View, $Null
		)
		
		$productVersion = $record.GetType().InvokeMember(
			"StringData", "GetProperty", $Null, $record, 1
		)
		
		$View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)
		
		return $productVersion
		
	}
	catch
	{
		throw "Failed to get MSI file version the error was: {0}." -f $_
	}
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $script:appVersion
	}
}


#Function to scan with malwarebytes, can also pass in your directory to scan with $currDir
#Hidden function of Malwarebytes Nebula:
#https://forums.malwarebytes.com/topic/264189-command-line-scanning/
function MalwarebytesScan
{
	Param
	(
		[Parameter(Mandatory = $false, Position = 0)]
		[string]$currDir = (Get-Location)
	)
	
	#check if old file is under temp and delete.
	if (Test-Path "C:\Temp\scan.txt")
	{
		#Delete old file
		Remove-Item "C:\Temp\scan.txt"
	}
	
	#Make a new file under C:\Temp\scan.txt with the text in it being the path you want to scan ($currDir)
	New-Item -Path "C:\Temp\scan.txt" -ItemType File -Value $currDir
	Start-Process -FilePath "C:\Program Files\Malwarebytes Endpoint Agent\UserAgent\EACmd.exe" -ArgumentList '-ContextScan="C:\Temp\scan.txt"'
	
	#show on GUI we started a scan. 
	$listbox1.Items.Add("$script:currTime Finished invoking Malwarebytes Nebula.")
	
}

#connect to MECM on the local machine (mount as a drive basically)
$ConnectButton_Click = {
	currTime #GUI stuff 
	
	#The following chunk of code can be generated from MECM under Blue bar (top left), Connect via Windows PowerShell ISE
	$script:siteCode = $siteCodeBox.Text
	$listbox1.Items.Add("$script:currTime Now connecting to $script:siteCode - Please wait.")
	
	$connectProgressBar.Show()
	$connectProgressBar.value = 0
	# Site configuration
	$script:siteCode = $siteCodeBox.Text # Site code 
	$ProviderMachineName = $siteURL.Text # SMS Provider machine name
	
	# Customizations
	$initParams = @{ }
	#$initParams.Add("Verbose", $true) # Uncomment this line to enable verbose logging
	#$initParams.Add("ErrorAction", "Stop") # Uncomment this line to stop the script on any errors
	
	# Do not change anything between lines 521 and 537
	 ###################################################
	# Import the ConfigurationManager.psd1 module 
	if ((Get-Module ConfigurationManager) -eq $null)
	{
		Import-Module "$($ENV:SMS_ADMIN_UI_PATH)\..\ConfigurationManager.psd1" @initParams
	}
	
	# Connect to the site's drive if it is not already present
	if ((Get-PSDrive -Name $siteCode -PSProvider CMSite -ErrorAction SilentlyContinue) -eq $null)
	{
		New-PSDrive -Name $siteCode -PSProvider CMSite -Root $ProviderMachineName @initParams
	}
	
	# Set the current location to be the site code.
	Set-Location "$($siteCode):\" @initParams
	
	######################################################
	#whew! We should be connected now. Let's prefill all the GUI dropdowns with info from MECM
	#update log time, set 50% progress, get list of scripts. 
	currTime
	$connectProgressBar.Value = 50
	$listbox1.Items.Add("$script:currTime --> Getting scripts list.")
	Get-Scripts
	
	#log time update, set progress to 75% and get deployment groups. 
	currTime
	$connectProgressBar.Value = 75
	$listbox1.Items.Add("$script:currTime --> Getting deployment groups list.")
	Get-Groups
	
	#Updating progress bar and enabling other tabs which rely on a connection to function
	#FIXME: Could potentially have an error if it doesn't connect and the other tabs get enabled. 
	currTime
	$connectProgressBar.Value = 90
	$runScriptsTab.Enabled = $true
	$buttonRunScript.Enabled = $true
	$deployTab.Enabled = $true
	
	currTime #update log time
	$connectProgressBar.Value = 100 #show progress 100% on the bar
	$listbox1.Items.Add("$script:currTime Finished connecting and retrieving lists.") #log to screen
	
}

#TODO: Update run script with progress and everything. 
$buttonRunScript_Click = {
	currTime
	#Run script on a collection
	$scriptProgress.Show()
	$scriptProgress.Value = 0
	
	#Finds script by name in MECM, runs script based on the GUID 
	$test1 = $scriptsDropdown.Text
	$test2 = $DeploymentGroupDropdown.Text
	$listbox1.Items.Add("$script:currTime $test1 and $test2")
	$listbox1.Items.Add("$script:currTime Attempting to $test1 on the collection $test2 ")
	$scriptObj = (Get-CMScript -Fast -ScriptName $scriptsDropdown.Text).ScriptGUID
	$listbox1.Items.Add("$script:currTime Found $scriptObj")
	
	currTime #update log time before we log, run script on collection ID
	$collectionObj = (Get-CMCollection -Name $DeploymentGroupDropdown.Text).CollectionID
	$listbox1.Items.Add("$script:currTime Got collection $collectionObj")
	
	currTime
	Invoke-CMScript -ScriptGuid $scriptObj -CollectionID $collectionObj
	$listbox1.Items.Add("$script:currTime Invoked the script. Please check MECM for your app or the PowerShell output for errors.")
	
	#TODO: Get better messages here if it fails. There's no live status or anything, we just tell MECM, "HEY! Do this!"
	$scriptProgress.Value = 100
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Write-XML
{
	currTime
	#NOW USES \Recipes\AppName.xml
	$script:appName = $appNameBox.Text
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	if (-not(Test-Path $xmlPath))
	{
		$listbox1.Items.Add("$script:currTime Creating the $appName.xml file in this script's directory.")
		New-Item $xmlPath -Force
	}
	
	#Get variables from input boxes
	
	$script:appName = $appNameBox.Text
	$script:appVendor = $appVendorBox.Text
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation #you may sometimes need this in other areas
	
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	$script:contentLocation 
	$script:installCommand = $installCMDBox.Text #This is probably grabbing this from the GUI: "Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $uninstallCMDBox.Text #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $detectionPathBox.Text
	$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	#END VARIABLE SETUP
	
	
	
	#check if XML exists, check for app name. 
	$script:appName = $appNameBox.Text
	[xml]$readXML = Get-Content $xmlPath
	$allAppNames = $readXML.Apps | ForEach-Object { $_.App.nameOfApp }
	if ($allAppNames -contains $script:appName)
	{
		currTime
		$listbox1.Items.Add("$script:currTime Found appname in the XML file. Changing. ")
		
		#Updates variables in XML and saves.
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		#One XML per app only!
		#$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file all the variables we got from the GUI
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime Didn't find appname in the XML file. Creating entry. ")
		
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
	}
	
	
	
}


function Read-XML
{
	currTime #update time for logging
	#How to use XML Reader
	# https://www.sapien.com/blog/2018/03/22/storing-powershell-variables-in-external-files/comment-page-1/
	
	$script:appName = $appNameBox.Text
	$appName = $script:appName
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	#Read in all of the information from our variables XML file
	#We will need to cast the variable as [XML] when we store all of the file information in it
	if (-not (Test-Path $xmlPath))
	{
		#tell on screen we cannot find the recipe file. 
		$listbox1.Items.Add("Cannot find \Recipes\$appName.xml")
	}
	
	[xml]$readXML = Get-Content -Path $xmlPath
	
	
	#Get variables from XML and save in Variables.
	#it's a bit messy, but this is the format. 
	
	$script:appName = $readXML.Apps.app.nameOfApp
	$script:appVendor = $readXML.Apps.app.vendor
	$script:appVersion = $readXML.Apps.app.version
	$script:fileExtension = $readXML.Apps.app.fileExt
	$script:appDescription = $readXML.Apps.app.description
	
	$script:iconLocation = $readXML.Apps.app.iconFile
	$img = [System.Drawing.Image]::Fromfile($script:iconLocation)
	$iconDisplayBox.Image = $img
	
	$script:userDocsText = $readXML.Apps.app.userDocumentText
	$script:userDocumentationLink = $readXML.Apps.app.userDocumentLink
	$script:privacyLink = $readXML.Apps.app.userPrivacyLink 
	
	
	$script:contentLocation = $readXML.Apps.app.serverLoc
	$script:installCommand = $readXML.Apps.app.installCommand #"Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $readXML.Apps.app.uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $readXML.Apps.app.detectPath
	$script:detectionPath2 = $readXML.Apps.app.detectPath1 #keep this - important later on!
	
	$script:regPath = $readXML.Apps.app.registryPath
	$script:regItem = $readXML.Apps.app.registryItem
	$script:regItemIs = $readXML.Apps.app.registryItemValue
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $readXML.Apps.app.distributionPointURL
	$script:dpGroupName = $readXML.Apps.app.distributionPointGroupName
	
	
	#Put the variables to the GUI!
	
	$appNameBox.Text = $script:appName
	$appVendorBox.Text = $script:appVendor
	$versionBox.Text = $script:appVersion
	$typeBox.Text = $script:fileExtension
	$appDescriptionBox.Text = $script:appDescription
	
	$script:iconLocation = $script:iconLocation
	
	$userDocTextBox.Text = $script:userDocsText
	$userDocumentationLinkBox.Text = $script:userDocumentationLink
	$privacyLinkBox.Text = $script:privacyLink 
	
	$serverFolderBox.Text = $script:contentLocation
	
	
	$installCMDBox.Text = $script:installCommand #"Deploy-Application-$appName.ps1"
	$uninstallCMDBox.Text = $script:uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$detectionPathBox.Text = $script:detectionPath1
	$detectionPathBox1.Text = $script:detectionPath2#keep this - important later on!
	
	$registryPathBox.Text = $script:regPath
	$regCheckKey.Text = $script:regItem
	$regKeyValue.Text = $script:regItemIs
	#$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$distPointBox.Text = $script:distributionPoint
	$deploymentGroupBox.Text = $script:dpGroupName
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

#FIXME: Not deploying correctly!
<#function Deploy-ApplicationToSCCMCollection
{
	#Nathan the Gr8 
	#https://github.com/NathanTheGr8/SCCMPackageAutomation
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$Collection,
		[Parameter(Mandatory = $true)]
		[string]$ApplicationName,
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Available', 'Required', IgnoreCase = $true)]
		$DeployPurpose = "available",
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Install', 'Uninstall', IgnoreCase = $true)]
		$DeployAction = "Install"
	)
	
	Write-Output "Deploying $ApplicaitonName to $Collection"
	$date = Get-Date
	
	try
	{
		
		$newDeployment = New-CMApplicationDeployment -CollectionName $Collection -Name $ApplicationName -DeployPurpose $DeployPurpose `
													 -Comment "Deployed by PS module SCCMPackageAutomation" -DeployAction $DeployAction -UserNotification "DisplayAll" `
													 -ApprovalRequired $false
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Successful")
	}
	catch
	{
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Failed")
		$listbox1.Items.Add("$_")
	}
}#>


function Deploy-Now
{
	$deployProgress.value = 0
	
	$script:appName = $appNameBox.Text
	$script:appName = $script:appName
	$script:appVendor = $appVendorBox.Text
	
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	#$script:contentLocation = #Set by popup dialog
	$script:installCommand = $installCMDBox.Text 
	$script:uninstallCommand = $uninstallCMDBox.Text
	
	#Get the detection locations for the app from the GUI if it isn't null
	if ($detectionPathBox.Text -eq "" -and $detectionPathBox1 -eq "")
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -eq $null -and $detectionPathBox1 -eq $null)
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -ne $null -or $detectionPathBox1 -ne $null)
	{
		$script:detectionPath1 = $detectionPathBox.Text
		$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	}
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	
	$appVersion = $script:appVersion
	currTime
	$deployProgress.value = 10
	#$siteCode = $script:siteCode 
	$listbox1.Items.Add("$script:currTime Connected to MECM $SiteCode")
	$listbox1.Items.Add("$script:currTime checking if an app already exists")
	
	if (Get-CMApplication -Name "$appName Dev $appVersion" -Fast)
	{
		currTime
		$listbox1.Items.Add("$script:currTime --> Removing existing app")
		$thisCollection = Get-CMCollection -Name $script:dpGroupName #caution: Added for safety to only delete apps from this TESTING distro.
		Remove-CMApplicationDeployment -Name "$appName Dev $appVersion" -Collection $thisCollection
		Get-CMApplication -Name "$appName Dev $appVersion" | Remove-CMApplication -Force
	}
	currTime
	$listbox1.Items.Add("$script:currTime --> Check complete")
	
	#testing to deploy to MECM
	New-CMApplication -Name "$appName Dev $appVersion" -Publisher $appVendor -IconLocationFile $iconLocation -Keyword "$appName,$appVendor" -LocalizedName "$appName Dev" -LocalizedDescription $appDescription -UserDocumentation $userDocumentationLink -LinkText $userDocsText -ReleaseDate $appScriptDate -SoftwareVersion $appVersion -PrivacyUrl $privacyLink # -AutoInstall $True
	$deployProgress.value = 20
	
	currTime
	$listbox1.Items.Add("$script:currTime Added detection clauses and started app creation")
	
	Start-Sleep(2);
	
	#This is the app detection script that goes into MECM
	$MECMDetectionMethodScript = '
		if((Test-Path -Path "$detectionPath1") -or (Test-Path -Path "$detectionPath2") -or ((Get-ItemProperty -path "$regPath" | Select-object -ExpandProperty "$regItem") -eq $regItemIs))
		{ 
			Write-Host "installed"
		}
		else
		{
			
		}
		'
	
	#Send Install methods command with params set above
	Add-CMScriptDeploymentType -ApplicationName "$appName Dev $appVersion" -ContentLocation $script:contentLocation -InstallCommand $script:installCommand -DeploymentTypeName "Install" -UninstallCommand $script:uninstallCommand -MaximumRuntimeMins "45" -InstallationBehaviorType "InstallForSystem" -LogonRequirementType "WhetherOrNotUserLoggedOn" -Comment "Automated Application Deployment - Detection Method - Registry" -ScriptLanguage "PowerShell" -ScriptText $MECMDetectionMethodScript #-AddDetectionClause $detectionrule
	
	currTime
	$listbox1.Items.Add("$script:currTime Added install and uninstall commands")
	$deployProgress.value = 30
	
	
	#Deploy the app to SCCM server and the Software Deployment Team Test Collection
	Start-CMContentDistribution -ApplicationName "$script:appName Dev $script:appVersion" -DistributionPointName $script:distributionPoint -DistributionPointGroupName $script:dpGroupName
	$deployProgress.value = 50
	Start-Sleep(20);
	
	currTime
	$deployProgress.value = 75
	#Deploy-ApplicationToSCCMCollection -collection $dpGroupName -ApplicationName "$appName Dev $appVersion" -DeployPurpose "Available" -DeployAction "Install"
	New-CMApplicationDeployment -CollectionName $script:dpGroupName -Name "$script:appName Dev $script:appVersion" -Comment "MECM Buddy Automated Installer Deployment"
	$listbox1.Items.Add("$script:currTime Sent for distribution and app deployment")
	Start-Sleep(5);
	
	currTime
	$deployProgress.value = 100
	$listbox1.Items.Add("$script:currTime Complete! Go run an Invoke-SilentPolicyRefresh")
}



$deployButton_Click = {
	currTime
	Deploy-Now
}

$buttonImport_Click = {
	#currTime
	Read-XML
}

$serverContentButton_Click = {
	currTime
	$folderbrowsermoderndialog1.ShowDialog()
	$script:contentLocation = $folderbrowsermoderndialog1.SelectedPath
	$serverFolderBox.Text = $script:contentLocation
	$script:serverFolderBox = $serverFolderBox.Text
}

$buttonPickIcon_Click = {
	currTime
	$openfiledialog1.ShowDialog()
	$openfiledialog1.Filter = "Image Files(*.ICO;*.PNG)|*.ICO;*.PNG|All files (*.*)|*.*"
	$script:iconLocation = $openfiledialog1.FileName
	$img = [System.Drawing.Image]::Fromfile($openfiledialog1.FileName)
	$iconDisplayBox.Image = $img
}

$registryButton_Click = {
	currTime
	#TODO: Add browse registry
	#FIXME: Registry
}

$buttonExport_Click = {
	currTime
	Write-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe has been exported.")
}

$buttonHowToUse_Click = {
	currTime
	#TODO: Update documentation and add to GitHub
	Start-Process "https://socarlson.notion.site/MECM-Buddy-272ddf982f3e41a9b018de465427dda5"
}

$buttonBrowseFolder_Click = {
	
	$folderbrowsermoderndialog2Download.ShowDialog()
	$script:downloadLoc = $folderbrowsermoderndialog2Download.SelectedPath
	$downloadLocBox.Text = $script:downloadLoc
	
	currTime
	$listbox1.Items.Add("$script:currTime NEW Download Location: $script:downloadLoc")
	
}

$buttonStart_Click={
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to start Malwarebytes... Please wait!")
	MalwarebytesScan -currDir $script:mbamFolder
}

$buttonSelectFolder_Click = {
	currTime
	$folderbrowserMBAM.ShowDialog()
	$script:mbamFolder = $folderbrowserMBAM.SelectedPath
	$mbamPathBox.Text = $script:mbamFolder
}


function Update-HashesBox
{
	$hashesBox.Items.Clear()
	foreach ($hash in $script:hashArray)
	{
		$hashesBox.Items.Add($hash)
	}
}

#Needs Evergreen Module
#FIXME: Universal function to get the latest app
#Problem: Sorting by type, architecture, and/or channels logic may not work with more than two param items specified.
function GetLatest
{
	Param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$friendlyName,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$appName,
		[Parameter(Mandatory = $false, Position = 2)]
		[string]$fileExtension,
		[Parameter(Mandatory = $false, Position = 3)]
		[string]$architecture,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$channel
		
	)
	currTime
	
	#Make the directory for the app
	New-Item "$script:downloadLoc\$friendlyName\Files\" -ItemType Directory -Force
	$latestApp = "about:blank"
	
	#$typeBox.Text = $fileExtension
	#This is the logic for what we pass in. It's a good start but can break easily. 
	#In other words, if you pass in something new my logic may break and fail. 
	
	#To add something new,
	#Basically, you'll want to find what you need with Find-EvergreenApp "AppnameHere"
	#Then, based off what it returns, this is how we can refine the results to find the 
	#   exact download URL for the latest app (using where-object to sort the list Get-EvergreenApp returns.)
	
	#Friendly name is what we use to name the file, so PSTK can grab the name and run
	#Also, we want to keep it consistant with what is in our registry under 
	#HKLM:\SOFTWARE\MECM\$appName
	
	#Dynamic FileExtension Installer (Will probably break if they rotate between .msi and .exe)
	if ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($architecture)))) #How to check null or empty: https://stackoverflow.com/questions/45008016/check-if-a-string-is-not-null-or-empty
	{
		#Gave us file extension and architecture
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($channel))))
	{
		#Gave us file extension and channel
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Channel -eq $channel }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($architecture)))
	{
		#Gave us who knows what, but we have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Architecture -eq $architecture }
		
		#We still need the file extension.
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($channel)))
	{
		#Gave us who knows what, but we know we at least have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Channel -eq $channel }
		
		#We still need the file extension
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($fileExtension)))
	{
		#We know we at least have the file extension.
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	else
	{
		#Generic, user does not care about type or anything, so we need to get the file type for when we save it later!
		$latestApp = Get-EvergreenApp -Name $appName
		
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	
	#$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture}
	#$fileName = Split-Path -Path $latestApp.Uri -Leaf
	#[string]$fileExtension = (Get-Item ".\AutoDownload\$appName\Files\$fileName").Extension #get current downloaded file extension
	$listbox1.Items.Add("$script:currTime Downloading to: $script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension")
	
	currTime
	#Get hashes
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	Update-HashesBox
	
	currTime
	$listbox1.Items.Add("$script:currTime $friendlyName MD5: $hashMD5")
	$listbox1.Items.Add("	 $friendlyName SHA256: $hash256")
}

#Airtame Downloader (It's not in Evergreen - this is how you do it if it isn't in Evergreen)
function GetAirtame
{
	#Make directory
	New-Item "$script:downloadLoc\Airtame\Files\" -ItemType Directory -Force
	
	#Get the latest file, put in directory
	Invoke-WebRequest -Uri "https://downloads-website.airtame.com/get.php?platform=win&msi=true" -OutFile "$script:downloadLoc\Airtame\Files\Airtame.msi"
	
	#Try to check hashes
	if ((Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA512).hash -eq "C9134235687349A6FF3A353F6FA6E055D401302C71413B32042A9AB2BA07329FA26EE376194DFE1A2797D3015B65A6B37A7E8E5AED3578FC6C3B5A91BED1D506")
	{
		Write-Output "Hooray! Airtame matched hashes I got on 1/28/2022"
	}
	
	#Get hash
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	$listbox1.Items.Add("$script:currTime Airtame MD5: $hashMD5")
	$listbox1.Items.Add("	 Airtame SHA256: $hash256")
	Update-HashesBox
}

$APPSdownloadBTN_Click={
	$listAppsDownload = $downloadAppList.CheckedItems
	$script:downloadLoc = $downloadLocBox.Text
	
	if ($downloadLocBox.Text -eq "")
	{
		$listbox1.Items.Add("$script:currTime ! Please select a download location ! ")
	}
	else
	{
		
		foreach ($app in $listAppsDownload)
		{
			if ($app -ne $null)
			{
				$listbox1.Items.Add("$script:currTime Downloading $app")
				#Now that we have shown the user what we are going to do, let's do it!
				if ($app -eq "Airtame")
				{
					GetAirtame
					$listbox1.Items.Add("$script:currTime Airtame has been downloaded.")
				}
				if ($app -eq "Office 365")
				{
					GetLatest "Office" "Microsoft365apps" $null $null "Current"
					$listbox1.Items.Add("$script:currTime Microsoft Office 365 has been downloaded.")
				}
				if ($app -eq "Tableau Desktop")
				{
					GetLatest "Tableau Desktop" "tableauDesktop" $null $null $null #heads up! This may switch between .exe and .msi
					$listbox1.Items.Add("$script:currTime Tableau Desktop has been downloaded.")
				}
				if ($app -eq "Tableau Prep")
				{
					GetLatest "Tableau Prep" "tableauPrep" $null $null $null
					$listbox1.Items.Add("$script:currTime Tableau Prep has been downloaded.")
				}
				if ($app -eq "VLC")
				{
					GetLatest "VLC" "VideoLanVlcPlayer" "msi" "x64" $null
					$listbox1.Items.Add("$script:currTime VLC has been downloaded.")
				}
				if ($app -eq "Zoom")
				{
					GetLatest -friendlyName "Zoom" "Zoom" "msi" $null $null
					$listbox1.Items.Add("$script:currTime Zoom has been downloaded.")
				}
				if ($app -eq "Zotero")
				{
					GetLatest "Zotero" "Zotero" $null $null $null
					$listbox1.Items.Add("$script:currTime Zotero has been downloaded.")
				}
			}
		}
	}
	
	Update-HashesBox
	
}

$PSTKdownloadBTN_Click={
	Start-Process "https://socarlson.notion.site/PSAppDeploymentToolkit-6abd5a3a72784d408399cc9eaf5077e5"
}

$buttonSaveLog_Click = {
	$folderBrowseLog.ShowDialog()
	$logFolder = $folderBrowseLog.SelectedPath
	
	$currDate = Get-Date -Format "yyyy.MM.dd-HH.mm"
	$logFile = "$logFolder\MECM Buddy $currDate.txt"
	New-Item $logFile -Force
	
	foreach ($item in $listbox1.Items)
	{
		#How to log: https://www.spguides.com/powershell-create-log-file/
		#$msgToLog = $message + ' - ' + (Get-Date).ToString()
		Add-content $logFile -Value $item
		
	}
	$listbox1.Items.Add("$script:currTime Finished logging to $logFile")
	Invoke-Item -Path $logFile
}

#old VirusTotal code:
<#
## Search VirusTotal for a file hash
## Chris Shearer
## 26-Aug-2020
## VirusTotal Public API: https://developers.virustotal.com/reference#file-report

#TODO: Add save/load for API Key!
Function get-VTFileReportOld
{
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## Get your own VT API key here: https://www.virustotal.com/gui/join-us
	if ($vtAPIbox.Text = "")
	{
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("Hash: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			$curHash = $hash
			$curSample = $samples
			
			$listbox1.Items.Add("Samples: $curSample $curHash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}
#>

#You need your own API key to use VirusTotal reporting (free - rate limited)
#more info here: https://www.virustotal.com/gui/join-us
Function get-VTFileReport
{
	#You need your own API key to use VirusTotal reporting (free - rate limited)
	#more info here: https://www.virustotal.com/gui/join-us
	
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## You need your own VT API key here: https://www.virustotal.com/gui/join-us
	
	if (($vtAPIbox.Text.ToString() = "") -or ($vtAPIbox.Text -eq $null))
	{
		#You need your API key to use this module.
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text.ToString()
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("VT Hashes: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			
			$listbox1.Items.Add("--> Now sampling: $hash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			##TODO: Potential API version 3 update needed? Using V2 right now because they have hashing
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}


$buttonCheckHashes_Click={
	Get-VTFileReport -h $script:hashArray	
}

$buttonBrowse_Click={
	$openfiledialog2.ShowDialog()
	#$script:installFileLoc = $openfiledialog2.FileName 
	$script:installFile = Split-Path $openfiledialog2.FileName -Leaf
	$appInstallerBox.Text = $script:installFile
	
	#GET VERSIONING DYNAMICALLY IF POSSIBLE
	if ($script:fileExtension -eq "msi")
	{
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		$newAppVersion = Get-MSIVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
	}
	else
	{
		#must be EXE 
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		#$newAppVersion = Get-ExeVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
		#Get the EXE version and RETURN the version in script.
		$appVersionTemp = (Get-Item -Path "$folder\Files\$file").VersionInfo.FileVersion
		
		#If what we have isn't null, then return that new variable from the file
		#If this fails, it's probably because of this check or a file change from the makers of the file. 
		#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
		if ($appVersionTemp -ne $null)
		{
			$newAppVersion = $appVersionTemp
		}
	}
	
	$title = 'App Version'
	$question = "Should I update app version to $newAppVersion?"
	
	$choices = New-Object Collections.ObjectModel.Collection[Management.Automation.Host.ChoiceDescription]
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&Yes'))
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&No'))
	
	$decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
	if ($decision -eq 0)
	{
		$script:appVersion = $newAppVersion
		$listbox1.Items.Add("--> Dynamic Version: $script:appVersion")
	}
	else
	{
		$listbox1.Items.Add("--> No dynamic change in app version. ")
	}
}

$appNameBox_SelectionChangeCommitted={
	#currTime
	Read-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe selected.")
}

$buttonInstallModules_Click = {
	currTime
	$listbox1.Items.Add("Attempting to install modules.")
	$listbox1.Items.Add("--> ConfigurationManager module")
	Import-Module -Name "ConfigurationManager" -Force
	$listbox1.Items.Add("--> Evergreen module")
	Import-Module -Name "Evergreen" -Force
	$listbox1.Items.Add("Done working on modules")
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>