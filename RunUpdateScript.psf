<File version="3.2">
  <FileID>dae19541-b548-4204-90b3-b023969caa1b</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAJWhSURBVHhe7P1nkBxJmqYJzp/dnRW5vT8rsiJ3
crfk9mTl9k5kZqent6e7p6d7ppoUr6wklZlICmSC0+Ccc84555x6cObBOec8wrkH55y9p2ruAQQC
DiQyE+WOAL4H8sJNzdTU1Mw97HtVTc3sXxEEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRD6wP+//df/WvzJJ5+IPT19xG5unmJXEolEIpFIV0pu
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</Preview>
  <Form>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
rMcGAA==</Form>
  <Code><![CDATA[<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.203
	 Created on:   	4/29/2022 1:37 PM
	 Created by:   	Sophie Carlson
	 Organization: 	
	 Filename:     	RunUpdateScript.psf
	===========================================================================
	.DESCRIPTION
		This project aims to simplify the process of downloading, deploying apps, and running scripts in MECM/SCCM.

		Inspiration: 
		I was tired of constantly clicking buttons in MECM, as well as downloading a bunch of installers. 
		So, I decided to start automating MECM downloads and installs. I wanted to check hashes and 
		make sure files were legitimate, as well as run scans on VirusTotal and through out 
		installation of Malwarebytes Nebula.  

		Then, once I got an app downloaded and deployed, it could take hours for MECM to update.
		So, I decided it would be quicker to make my own deployment scripts and a way to invoke them without the 
		laggy GUI.

		HOW TO USE GUI: 

		Connect: Pretty basic, enter your site code and domain to connect to. Once you click connect,
		it will prefill the scripts and deployment groups into the GUI. There's a button to try
		to install the modules if you don't have them already. 
		
		Download: Select a download folder, select what apps you want, then click download. It downloads
		and saves the hashes to an array. You can use Malwarebytes Nebula (if you have it) to scan the files.
		If you want to use VirusTotal, you need an API Key for free from here: 
			https://support.virustotal.com/hc/en-us/articles/115002100149-API
		
		Deploy: Can import and export settings to an XML file under .\Recipes from where you are running the script.
		It needs some improvements on the detection methods, but it works pretty well. 

		Scripts: Select a script and a group, click run and then it will be run on the collection you specified. 
		
	

		FINAL THOUGHTS, LICENSE:
		This project is still in a very basic stage, so please contribute to it. 
		
		NOTE: You must keep the license and my name in the code. I'm a college student who 
		worked really hard on this and I would really appreciate the recognition. 

#>

##INITIAL SETUP
#Ensure recipes folder exists
if ((Test-Path ".\Recipes") -eq $false)
{
	New-Item -Path ".\Recipes" -ItemType directory
}

#Disable if not connected to MECM/SCCM
$buttonRunScript.Enabled = $false
$connectProgressBar.Hide()
$scriptProgress.Hide()
$runScriptsTab.Enabled = $false
$deployTab.Enabled = $false

#Intune Tab
$labelThankYou.Hide()
$intuneFolderBrowser.Enabled = $false
$intuneBrowseFile.Enabled = $false
$intuneOutputFolderBrowser.Enabled = $false
$intuneButtonPackageIt.Enabled = $false

$labelFolderWithSubfolders.Hide()
$labelFolderNameDeployAppl.Hide()

$script:hashArray = New-Object -TypeName System.Collections.ArrayList

function currTime
{
	#How to Time https://stackoverflow.com/questions/46734884/powershell-adding-milliseconds-to-timestamp
	$script:currTime = Get-Date -Format "(HH:mm:ss)" #"yyyy.MM.dd-HH.mm" #AM or PM is tt
}

currTime

$formMECMBuddyV10_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formMECMBuddyV10 -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formMECMBuddyV10 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-Scripts
{
	#adds scripts from MECM to dropdown windows
	$scriptsDropdown.Items.Clear()
	$scriptsList = (Get-CMScript -Fast).ScriptName | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$scriptsDropdown.Items.Add($s)
		}
	}
	
	#Try to fill in appNameBoxCombo
	$currentPath = Split-Path $script:MyInvocation.MyCommand.Path
	$currentPath += "\Recipes\"
	$listOfAppNames = (Get-ChildItem $currentPath).Basename
	
	foreach ($name in $listOfAppNames)
	{
		$appNameBox.Items.Add($name)
	}
	
}


function Get-Groups
{
	#adds deployments from MECM to dropdown windows
	
	$DeploymentGroupDropdown.Items.Clear() #clear on scripts tab
	$DeploymentGroupBox.Items.Clear() #clear on deploy tab
	$scriptsList = (Get-CMCollection).Name | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$DeploymentGroupDropdown.Items.Add($s) #add to script list
			$deploymentGroupBox.Items.Add($s) #add to deploy list
		}
	}
}


function Get-ExeVersion()
{
	#Version 1.1
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = ".\Files\$appInstallerName"
	)
	
	#Get the EXE version and RETURN the version in script.
	$appVersionTemp = (Get-Item -Path $appInstallerPath).VersionInfo.FileVersion
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $appVersion
	}
}

function Get-MSIVersion()
{
	#Version 1.0
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = "$workingDirectory\$appName\Files\$appName.msi"
	)
	
	#Stack Overflow
	#https://stackoverflow.com/questions/8743122/how-do-i-find-the-msi-product-version-number-using-powershell
	#Original blog: https://winadminnotes.wordpress.com/2010/04/05/accessing-msi-file-as-a-database/
	try
	{
		$FullPath = (Resolve-Path $appInstallerPath).Path
		$windowsInstaller = New-Object -com WindowsInstaller.Installer
		
		$database = $windowsInstaller.GetType().InvokeMember(
			"OpenDatabase", "InvokeMethod", $Null,
			$windowsInstaller, @($FullPath, 0)
		)
		
		$q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
		$View = $database.GetType().InvokeMember(
			"OpenView", "InvokeMethod", $Null, $database, ($q)
		)
		
		$View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
		
		$record = $View.GetType().InvokeMember(
			"Fetch", "InvokeMethod", $Null, $View, $Null
		)
		
		$productVersion = $record.GetType().InvokeMember(
			"StringData", "GetProperty", $Null, $record, 1
		)
		
		$View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)
		
		return $productVersion
		
	}
	catch
	{
		throw "Failed to get MSI file version the error was: {0}." -f $_
	}
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $script:appVersion
	}
}


#Function to scan with malwarebytes, can also pass in your directory to scan with $currDir
#Hidden function of Malwarebytes Nebula:
#https://forums.malwarebytes.com/topic/264189-command-line-scanning/
function MalwarebytesScan
{
	Param
	(
		[Parameter(Mandatory = $false, Position = 0)]
		[string]$currDir = (Get-Location)
	)
	
	#check if old file is under temp and delete.
	if (Test-Path "C:\Temp\scan.txt")
	{
		#Delete old file
		Remove-Item "C:\Temp\scan.txt"
	}
	
	#Make a new file under C:\Temp\scan.txt with the text in it being the path you want to scan ($currDir)
	New-Item -Path "C:\Temp\scan.txt" -ItemType File -Value $currDir
	Start-Process -FilePath "C:\Program Files\Malwarebytes Endpoint Agent\UserAgent\EACmd.exe" -ArgumentList '-ContextScan="C:\Temp\scan.txt"'
	
	#show on GUI we started a scan. 
	$listbox1.Items.Add("$script:currTime Finished invoking Malwarebytes Nebula.")
	
}

#connect to MECM on the local machine (mount as a drive basically)
$ConnectButton_Click = {
	currTime #GUI stuff 
	
	#The following chunk of code can be generated from MECM under Blue bar (top left), Connect via Windows PowerShell ISE
	$script:siteCode = $siteCodeBox.Text
	$listbox1.Items.Add("$script:currTime Now connecting to $script:siteCode - Please wait.")
	
	$connectProgressBar.Show()
	$connectProgressBar.value = 0
	# Site configuration
	$script:siteCode = $siteCodeBox.Text # Site code 
	$ProviderMachineName = $siteURL.Text # SMS Provider machine name
	
	# Customizations
	$initParams = @{ }
	#$initParams.Add("Verbose", $true) # Uncomment this line to enable verbose logging
	#$initParams.Add("ErrorAction", "Stop") # Uncomment this line to stop the script on any errors
	
	# Do not change anything between lines 521 and 537
	 ###################################################
	# Import the ConfigurationManager.psd1 module 
	if ((Get-Module ConfigurationManager) -eq $null)
	{
		Import-Module "$($ENV:SMS_ADMIN_UI_PATH)\..\ConfigurationManager.psd1" @initParams
	}
	
	# Connect to the site's drive if it is not already present
	if ((Get-PSDrive -Name $siteCode -PSProvider CMSite -ErrorAction SilentlyContinue) -eq $null)
	{
		New-PSDrive -Name $siteCode -PSProvider CMSite -Root $ProviderMachineName @initParams
	}
	
	# Set the current location to be the site code.
	Set-Location "$($siteCode):\" @initParams
	
	######################################################
	#whew! We should be connected now. Let's prefill all the GUI dropdowns with info from MECM
	#update log time, set 50% progress, get list of scripts. 
	currTime
	$connectProgressBar.Value = 50
	$listbox1.Items.Add("$script:currTime --> Getting scripts list.")
	Get-Scripts
	
	#log time update, set progress to 75% and get deployment groups. 
	currTime
	$connectProgressBar.Value = 75
	$listbox1.Items.Add("$script:currTime --> Getting deployment groups list.")
	Get-Groups
	
	#Updating progress bar and enabling other tabs which rely on a connection to function
	#FIXME: Could potentially have an error if it doesn't connect and the other tabs get enabled. 
	currTime
	$connectProgressBar.Value = 90
	$runScriptsTab.Enabled = $true
	$buttonRunScript.Enabled = $true
	$deployTab.Enabled = $true
	
	currTime #update log time
	$connectProgressBar.Value = 100 #show progress 100% on the bar
	$listbox1.Items.Add("$script:currTime Finished connecting and retrieving lists.") #log to screen
	
}

#TODO: Update run script with progress and everything. 
$buttonRunScript_Click = {
	currTime
	#Run script on a collection
	$scriptProgress.Show()
	$scriptProgress.Value = 0
	
	#Finds script by name in MECM, runs script based on the GUID 
	$test1 = $scriptsDropdown.Text
	$test2 = $DeploymentGroupDropdown.Text
	$listbox1.Items.Add("$script:currTime $test1 and $test2")
	$listbox1.Items.Add("$script:currTime Attempting to $test1 on the collection $test2 ")
	$scriptObj = (Get-CMScript -Fast -ScriptName $scriptsDropdown.Text).ScriptGUID
	$listbox1.Items.Add("$script:currTime Found $scriptObj")
	
	currTime #update log time before we log, run script on collection ID
	$collectionObj = (Get-CMCollection -Name $DeploymentGroupDropdown.Text).CollectionID
	$listbox1.Items.Add("$script:currTime Got collection $collectionObj")
	
	currTime
	Invoke-CMScript -ScriptGuid $scriptObj -CollectionID $collectionObj
	$listbox1.Items.Add("$script:currTime Invoked the script. Please check MECM for your app or the PowerShell output for errors.")
	
	#TODO: Get better messages here if it fails. There's no live status or anything, we just tell MECM, "HEY! Do this!"
	$scriptProgress.Value = 100
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Write-XML
{
	currTime
	#NOW USES \Recipes\AppName.xml
	$script:appName = $appNameBox.Text
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	if (-not(Test-Path $xmlPath))
	{
		$listbox1.Items.Add("$script:currTime Creating the $appName.xml file in this script's directory.")
		New-Item $xmlPath -Force
	}
	
	#Get variables from input boxes
	
	$script:appName = $appNameBox.Text
	$script:appVendor = $appVendorBox.Text
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation #you may sometimes need this in other areas
	
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	$script:contentLocation 
	$script:installCommand = $installCMDBox.Text #This is probably grabbing this from the GUI: "Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $uninstallCMDBox.Text #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $detectionPathBox.Text
	$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	#END VARIABLE SETUP
	
	
	
	#check if XML exists, check for app name. 
	$script:appName = $appNameBox.Text
	[xml]$readXML = Get-Content $xmlPath
	$allAppNames = $readXML.Apps | ForEach-Object { $_.App.nameOfApp }
	if ($allAppNames -contains $script:appName)
	{
		currTime
		$listbox1.Items.Add("$script:currTime Found appname in the XML file. Changing. ")
		
		#Updates variables in XML and saves.
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		#One XML per app only!
		#$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file all the variables we got from the GUI
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime Didn't find appname in the XML file. Creating entry. ")
		
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
	}
	
	
	
}


function Read-XML
{
	currTime #update time for logging
	#How to use XML Reader
	# https://www.sapien.com/blog/2018/03/22/storing-powershell-variables-in-external-files/comment-page-1/
	
	$script:appName = $appNameBox.Text
	$appName = $script:appName
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	#Read in all of the information from our variables XML file
	#We will need to cast the variable as [XML] when we store all of the file information in it
	if (-not (Test-Path $xmlPath))
	{
		#tell on screen we cannot find the recipe file. 
		$listbox1.Items.Add("Cannot find \Recipes\$appName.xml")
	}
	
	[xml]$readXML = Get-Content -Path $xmlPath
	
	
	#Get variables from XML and save in Variables.
	#it's a bit messy, but this is the format. 
	
	$script:appName = $readXML.Apps.app.nameOfApp
	$script:appVendor = $readXML.Apps.app.vendor
	$script:appVersion = $readXML.Apps.app.version
	$script:fileExtension = $readXML.Apps.app.fileExt
	$script:appDescription = $readXML.Apps.app.description
	
	$script:iconLocation = $readXML.Apps.app.iconFile
	$img = [System.Drawing.Image]::Fromfile($script:iconLocation)
	$iconDisplayBox.Image = $img
	
	$script:userDocsText = $readXML.Apps.app.userDocumentText
	$script:userDocumentationLink = $readXML.Apps.app.userDocumentLink
	$script:privacyLink = $readXML.Apps.app.userPrivacyLink 
	
	
	$script:contentLocation = $readXML.Apps.app.serverLoc
	$script:installCommand = $readXML.Apps.app.installCommand #"Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $readXML.Apps.app.uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $readXML.Apps.app.detectPath
	$script:detectionPath2 = $readXML.Apps.app.detectPath1 #keep this - important later on!
	
	$script:regPath = $readXML.Apps.app.registryPath
	$script:regItem = $readXML.Apps.app.registryItem
	$script:regItemIs = $readXML.Apps.app.registryItemValue
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $readXML.Apps.app.distributionPointURL
	$script:dpGroupName = $readXML.Apps.app.distributionPointGroupName
	
	
	#Put the variables to the GUI!
	
	$appNameBox.Text = $script:appName
	$appVendorBox.Text = $script:appVendor
	$versionBox.Text = $script:appVersion
	$typeBox.Text = $script:fileExtension
	$appDescriptionBox.Text = $script:appDescription
	
	$script:iconLocation = $script:iconLocation
	
	$userDocTextBox.Text = $script:userDocsText
	$userDocumentationLinkBox.Text = $script:userDocumentationLink
	$privacyLinkBox.Text = $script:privacyLink 
	
	$serverFolderBox.Text = $script:contentLocation
	
	
	$installCMDBox.Text = $script:installCommand #"Deploy-Application-$appName.ps1"
	$uninstallCMDBox.Text = $script:uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$detectionPathBox.Text = $script:detectionPath1
	$detectionPathBox1.Text = $script:detectionPath2#keep this - important later on!
	
	$registryPathBox.Text = $script:regPath
	$regCheckKey.Text = $script:regItem
	$regKeyValue.Text = $script:regItemIs
	#$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$distPointBox.Text = $script:distributionPoint
	$deploymentGroupBox.Text = $script:dpGroupName
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

#FIXME: Not deploying correctly!
<#function Deploy-ApplicationToSCCMCollection
{
	#Nathan the Gr8 
	#https://github.com/NathanTheGr8/SCCMPackageAutomation
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$Collection,
		[Parameter(Mandatory = $true)]
		[string]$ApplicationName,
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Available', 'Required', IgnoreCase = $true)]
		$DeployPurpose = "available",
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Install', 'Uninstall', IgnoreCase = $true)]
		$DeployAction = "Install"
	)
	
	Write-Output "Deploying $ApplicaitonName to $Collection"
	$date = Get-Date
	
	try
	{
		
		$newDeployment = New-CMApplicationDeployment -CollectionName $Collection -Name $ApplicationName -DeployPurpose $DeployPurpose `
													 -Comment "Deployed by PS module SCCMPackageAutomation" -DeployAction $DeployAction -UserNotification "DisplayAll" `
													 -ApprovalRequired $false
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Successful")
	}
	catch
	{
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Failed")
		$listbox1.Items.Add("$_")
	}
}#>


function Deploy-Now
{
	$deployProgress.value = 0
	
	$script:appName = $appNameBox.Text
	$script:appName = $script:appName
	$script:appVendor = $appVendorBox.Text
	
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	#$script:contentLocation = #Set by popup dialog
	$script:installCommand = $installCMDBox.Text 
	$script:uninstallCommand = $uninstallCMDBox.Text
	
	#Get the detection locations for the app from the GUI if it isn't null
	if ($detectionPathBox.Text -eq "" -and $detectionPathBox1 -eq "")
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -eq $null -and $detectionPathBox1 -eq $null)
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -ne $null -or $detectionPathBox1 -ne $null)
	{
		$script:detectionPath1 = $detectionPathBox.Text
		$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	}
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	
	$appVersion = $script:appVersion
	currTime
	$deployProgress.value = 10
	#$siteCode = $script:siteCode 
	$listbox1.Items.Add("$script:currTime Connected to MECM $SiteCode")
	$listbox1.Items.Add("$script:currTime checking if an app already exists")
	
	if (Get-CMApplication -Name "$appName Dev $appVersion" -Fast)
	{
		currTime
		$listbox1.Items.Add("$script:currTime --> Removing existing app")
		$thisCollection = Get-CMCollection -Name $script:dpGroupName #caution: Added for safety to only delete apps from this TESTING distro.
		Remove-CMApplicationDeployment -Name "$appName Dev $appVersion" -Collection $thisCollection
		Get-CMApplication -Name "$appName Dev $appVersion" | Remove-CMApplication -Force
	}
	currTime
	$listbox1.Items.Add("$script:currTime --> Check complete")
	
	#testing to deploy to MECM
	New-CMApplication -Name "$appName Dev $appVersion" -Publisher $appVendor -IconLocationFile $iconLocation -Keyword "$appName,$appVendor" -LocalizedName "$appName Dev" -LocalizedDescription $appDescription -UserDocumentation $userDocumentationLink -LinkText $userDocsText -ReleaseDate $appScriptDate -SoftwareVersion $appVersion -PrivacyUrl $privacyLink # -AutoInstall $True
	$deployProgress.value = 20
	
	currTime
	$listbox1.Items.Add("$script:currTime Added detection clauses and started app creation")
	
	Start-Sleep(2);
	
	#This is the app detection script that goes into MECM
	$MECMDetectionMethodScript = '
		if((Test-Path -Path "$detectionPath1") -or (Test-Path -Path "$detectionPath2") -or ((Get-ItemProperty -path "$regPath" | Select-object -ExpandProperty "$regItem") -eq $regItemIs))
		{ 
			Write-Host "installed"
		}
		else
		{
			
		}
		'
	
	#Send Install methods command with params set above
	Add-CMScriptDeploymentType -ApplicationName "$appName Dev $appVersion" -ContentLocation $script:contentLocation -InstallCommand $script:installCommand -DeploymentTypeName "Install" -UninstallCommand $script:uninstallCommand -MaximumRuntimeMins "45" -InstallationBehaviorType "InstallForSystem" -LogonRequirementType "WhetherOrNotUserLoggedOn" -Comment "Automated Application Deployment - Detection Method - Registry" -ScriptLanguage "PowerShell" -ScriptText $MECMDetectionMethodScript #-AddDetectionClause $detectionrule
	
	currTime
	$listbox1.Items.Add("$script:currTime Added install and uninstall commands")
	$deployProgress.value = 30
	
	
	#Deploy the app to SCCM server and the Software Deployment Team Test Collection
	Start-CMContentDistribution -ApplicationName "$script:appName Dev $script:appVersion" -DistributionPointName $script:distributionPoint -DistributionPointGroupName $script:dpGroupName
	$deployProgress.value = 50
	Start-Sleep(20);
	
	currTime
	$deployProgress.value = 75
	#Deploy-ApplicationToSCCMCollection -collection $dpGroupName -ApplicationName "$appName Dev $appVersion" -DeployPurpose "Available" -DeployAction "Install"
	New-CMApplicationDeployment -CollectionName $script:dpGroupName -Name "$script:appName Dev $script:appVersion" -Comment "MECM Buddy Automated Installer Deployment"
	$listbox1.Items.Add("$script:currTime Sent for distribution and app deployment")
	Start-Sleep(5);
	
	currTime
	$deployProgress.value = 100
	$listbox1.Items.Add("$script:currTime Complete! Go run an Invoke-SilentPolicyRefresh")
}



$deployButton_Click = {
	currTime
	Deploy-Now
}

$buttonImport_Click = {
	#currTime
	Read-XML
}

$serverContentButton_Click = {
	currTime
	$folderbrowsermoderndialog1.ShowDialog()
	$script:contentLocation = $folderbrowsermoderndialog1.SelectedPath
	$serverFolderBox.Text = $script:contentLocation
	$script:serverFolderBox = $serverFolderBox.Text
}

$buttonPickIcon_Click = {
	currTime
	$openfiledialog1.ShowDialog()
	$openfiledialog1.Filter = "Image Files(*.ICO;*.PNG)|*.ICO;*.PNG|All files (*.*)|*.*"
	$script:iconLocation = $openfiledialog1.FileName
	$img = [System.Drawing.Image]::Fromfile($openfiledialog1.FileName)
	$iconDisplayBox.Image = $img
}

$registryButton_Click = {
	currTime
	#TODO: Add browse registry
	#FIXME: Registry
}

$buttonExport_Click = {
	currTime
	Write-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe has been exported.")
}

$buttonHowToUse_Click = {
	currTime
	#TODO: Update documentation and add to GitHub
	Start-Process "https://socarlson.notion.site/MECM-Buddy-272ddf982f3e41a9b018de465427dda5"
}

$buttonBrowseFolder_Click = {
	
	$folderbrowsermoderndialog2Download.ShowDialog()
	$script:downloadLoc = $folderbrowsermoderndialog2Download.SelectedPath
	$downloadLocBox.Text = $script:downloadLoc
	
	currTime
	$listbox1.Items.Add("$script:currTime NEW Download Location: $script:downloadLoc")
	$mbamPathBox.Text = $script:downloadLoc ##DYNAMICALLY UPDATE MALWAREBYTES SCAN FOLDER TO THE DOWNLOAD FOLDER WHEN SET.
}

$buttonStart_Click={
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to start Malwarebytes... Please wait!")
	
	#Set the path to what the dialog box shows
	$script:mbamFolder = $mbamPathBox.Text
	if ((Test-Path $script:mbamFolder) -eq $True)
	{
		MalwarebytesScan -currDir $script:mbamFolder
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime ! Error finding MBAM Folder location !")
		$listbox1.Items.Add("$script:currTime --> If it autofilled from the download folder, try manually selecting a folder using the choose folder button. ")
	}
	
}

$buttonSelectFolder_Click = {
	currTime
	$folderbrowserMBAM.ShowDialog()
	$script:mbamFolder = $folderbrowserMBAM.SelectedPath
	$mbamPathBox.Text = $script:mbamFolder
}


function Update-HashesBox
{
	$hashesBox.Items.Clear()
	foreach ($hash in $script:hashArray)
	{
		$hashesBox.Items.Add($hash)
	}
}

#Needs Evergreen Module
#FIXME: Universal function to get the latest app
#Problem: Sorting by type, architecture, and/or channels logic may not work with more than two param items specified.
function GetLatest
{
	Param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$friendlyName,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$appName,
		[Parameter(Mandatory = $false, Position = 2)]
		[string]$fileExtension,
		[Parameter(Mandatory = $false, Position = 3)]
		[string]$architecture,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$channel
		
	)
	currTime
	
	#Make the directory for the app
	New-Item "$script:downloadLoc\$friendlyName\Files\" -ItemType Directory -Force
	$latestApp = "about:blank"
	
	#$typeBox.Text = $fileExtension
	#This is the logic for what we pass in. It's a good start but can break easily. 
	#In other words, if you pass in something new my logic may break and fail. 
	
	#To add something new,
	#Basically, you'll want to find what you need with Find-EvergreenApp "AppnameHere"
	#Then, based off what it returns, this is how we can refine the results to find the 
	#   exact download URL for the latest app (using where-object to sort the list Get-EvergreenApp returns.)
	
	#Friendly name is what we use to name the file, so PSTK can grab the name and run
	#Also, we want to keep it consistant with what is in our registry under 
	#HKLM:\SOFTWARE\MECM\$appName
	
	#Dynamic FileExtension Installer (Will probably break if they rotate between .msi and .exe)
	if ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($architecture)))) #How to check null or empty: https://stackoverflow.com/questions/45008016/check-if-a-string-is-not-null-or-empty
	{
		#Gave us file extension and architecture
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($channel))))
	{
		#Gave us file extension and channel
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Channel -eq $channel }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($architecture)))
	{
		#Gave us who knows what, but we have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Architecture -eq $architecture }
		
		#We still need the file extension.
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($channel)))
	{
		#Gave us who knows what, but we know we at least have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Channel -eq $channel }
		
		#We still need the file extension
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($fileExtension)))
	{
		#We know we at least have the file extension.
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	else
	{
		#Generic, user does not care about type or anything, so we need to get the file type for when we save it later!
		$latestApp = Get-EvergreenApp -Name $appName
		
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	
	#$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture}
	#$fileName = Split-Path -Path $latestApp.Uri -Leaf
	#[string]$fileExtension = (Get-Item ".\AutoDownload\$appName\Files\$fileName").Extension #get current downloaded file extension
	currTime
	$listbox1.Items.Add("$script:currTime Downloading to: $script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension")
	
	currTime
	#Get hashes
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	Update-HashesBox
	
	currTime
	$listbox1.Items.Add("$script:currTime $friendlyName MD5: $hashMD5")
	$listbox1.Items.Add("	 $friendlyName SHA256: $hash256")
}

#Airtame Downloader (It's not in Evergreen - this is how you do it if it isn't in Evergreen)
function GetAirtame
{
	#Make directory
	New-Item "$script:downloadLoc\Airtame\Files\" -ItemType Directory -Force
	
	#Get the latest file, put in directory
	Invoke-WebRequest -Uri "https://downloads-website.airtame.com/get.php?platform=win&msi=true" -OutFile "$script:downloadLoc\Airtame\Files\Airtame.msi"
	
	#Try to check hashes
	if ((Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA512).hash -eq "C9134235687349A6FF3A353F6FA6E055D401302C71413B32042A9AB2BA07329FA26EE376194DFE1A2797D3015B65A6B37A7E8E5AED3578FC6C3B5A91BED1D506")
	{
		Write-Output "Hooray! Airtame matched hashes I got on 1/28/2022"
	}
	currTime
	
	#Get hash
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	currTime
	$listbox1.Items.Add("$script:currTime Airtame MD5: $hashMD5")
	$listbox1.Items.Add("	 Airtame SHA256: $hash256")
	Update-HashesBox
}

$APPSdownloadBTN_Click={
	$listAppsDownload = $downloadAppList.CheckedItems
	$script:downloadLoc = $downloadLocBox.Text
	
	if ($downloadLocBox.Text -eq "")
	{
		$listbox1.Items.Add("$script:currTime ! Please select a download location ! ")
	}
	else
	{
		
		foreach ($app in $listAppsDownload)
		{
			if ($app -ne $null)
			{
				$listbox1.Items.Add("$script:currTime Downloading $app")
				#Now that we have shown the user what we are going to do, let's do it!
				if ($app -eq "Airtame")
				{
					GetAirtame
					$listbox1.Items.Add("$script:currTime Airtame has been downloaded.")
				}
				if ($app -eq "Office 365")
				{
					GetLatest "Office" "Microsoft365apps" $null $null "Current"
					$listbox1.Items.Add("$script:currTime Microsoft Office 365 has been downloaded.")
				}
				if ($app -eq "Tableau Desktop")
				{
					GetLatest "Tableau Desktop" "tableauDesktop" $null $null $null #heads up! This may switch between .exe and .msi
					$listbox1.Items.Add("$script:currTime Tableau Desktop has been downloaded.")
				}
				if ($app -eq "Tableau Prep")
				{
					GetLatest "Tableau Prep" "tableauPrep" $null $null $null
					$listbox1.Items.Add("$script:currTime Tableau Prep has been downloaded.")
				}
				if ($app -eq "VLC")
				{
					GetLatest "VLC" "VideoLanVlcPlayer" "msi" "x64" $null
					$listbox1.Items.Add("$script:currTime VLC has been downloaded.")
				}
				if ($app -eq "Zoom")
				{
					GetLatest -friendlyName "Zoom" "Zoom" "msi" $null $null
					$listbox1.Items.Add("$script:currTime Zoom has been downloaded.")
				}
				if ($app -eq "Zotero")
				{
					GetLatest "Zotero" "Zotero" $null $null $null
					$listbox1.Items.Add("$script:currTime Zotero has been downloaded.")
				}
			}
		}
	}
	
	Update-HashesBox
	
}

$PSTKdownloadBTN_Click={
	Start-Process "https://socarlson.notion.site/PSAppDeploymentToolkit-6abd5a3a72784d408399cc9eaf5077e5"
}

$buttonSaveLog_Click = {
	$folderBrowseLog.ShowDialog()
	$logFolder = $folderBrowseLog.SelectedPath
	
	$currDate = Get-Date -Format "yyyy.MM.dd-HH.mm"
	$logFile = "$logFolder\MECM Buddy $currDate.txt"
	New-Item $logFile -Force
	
	foreach ($item in $listbox1.Items)
	{
		#How to log: https://www.spguides.com/powershell-create-log-file/
		#$msgToLog = $message + ' - ' + (Get-Date).ToString()
		Add-content $logFile -Value $item
		
	}
	$listbox1.Items.Add("$script:currTime Finished logging to $logFile")
	Invoke-Item -Path $logFile
}

#old VirusTotal code:
<#
## Search VirusTotal for a file hash
## Chris Shearer
## 26-Aug-2020
## VirusTotal Public API: https://developers.virustotal.com/reference#file-report

#TODO: Add save/load for API Key!
Function get-VTFileReportOld
{
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## Get your own VT API key here: https://www.virustotal.com/gui/join-us
	if ($vtAPIbox.Text = "")
	{
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("Hash: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			$curHash = $hash
			$curSample = $samples
			
			$listbox1.Items.Add("Samples: $curSample $curHash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}
#>

#You need your own API key to use VirusTotal reporting (free - rate limited)
#more info here: https://www.virustotal.com/gui/join-us
Function get-VTFileReport
{
	#You need your own API key to use VirusTotal reporting (free - rate limited)
	#more info here: https://www.virustotal.com/gui/join-us
	
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## You need your own VT API key here: https://www.virustotal.com/gui/join-us
	currTime
	
	if($vtAPIbox.Text -eq "") #($vtAPIbox.Text.ToString() = "")# -or ($vtAPIbox.Text -eq $null))
	{
		#You need your API key to use this module.
		$listbox1.Items.Add("$script:currTime --> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text.ToString()
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "$script:currTime No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("$script:currTime VT Hashes: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			currTime
			$listbox1.Items.Add("$script:currTime --> Now sampling: $hash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			##TODO: Potential API version 3 update needed? Using V2 right now because they have hashing
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			Start-Sleep(2)
			## Calculate percentage if there is a result
			currTime
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("$script:currTime Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
				#ADD TO GUI
				$listbox1.Items.Add("$script:currTime Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			currTime
			$listbox1.Items.Add("$script:currTime Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			
			currTime
			$listbox1.Items.Add("$script:currTime Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("$script:currTime End of VirusTotal. ")
}


$buttonCheckHashes_Click = {
	if ($script:hashArray.Count -eq 0)
	{
		currTime #Sorry this is annoying to always get the time
		$listbox1.Items.Add("$script:currTime ! The list of hashes is blank ! ")
		$listbox1.Items.Add("$script:currTime --> Did you download anything yet? ")
	}
	else
	{
		Get-VTFileReport -h $script:hashArray
	}
}

$buttonBrowse_Click={
	$openfiledialog2.ShowDialog()
	#$script:installFileLoc = $openfiledialog2.FileName 
	$script:installFile = Split-Path $openfiledialog2.FileName -Leaf
	$appInstallerBox.Text = $script:installFile
	
	#GET VERSIONING DYNAMICALLY IF POSSIBLE
	if ($script:fileExtension -eq "msi")
	{
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		$newAppVersion = Get-MSIVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
	}
	else
	{
		#must be EXE 
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		#$newAppVersion = Get-ExeVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
		#Get the EXE version and RETURN the version in script.
		$appVersionTemp = (Get-Item -Path "$folder\Files\$file").VersionInfo.FileVersion
		
		#If what we have isn't null, then return that new variable from the file
		#If this fails, it's probably because of this check or a file change from the makers of the file. 
		#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
		if ($appVersionTemp -ne $null)
		{
			$newAppVersion = $appVersionTemp
		}
	}
	
	$title = 'App Version'
	$question = "Should I update app version to $newAppVersion?"
	
	$choices = New-Object Collections.ObjectModel.Collection[Management.Automation.Host.ChoiceDescription]
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&Yes'))
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&No'))
	
	$decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
	if ($decision -eq 0)
	{
		$script:appVersion = $newAppVersion
		$listbox1.Items.Add("$script:currTime --> Dynamic Version: $script:appVersion")
	}
	else
	{
		$listbox1.Items.Add("$script:currTime --> No dynamic change in app version. ")
	}
}

$appNameBox_SelectionChangeCommitted={
	#currTime
	Read-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe selected.")
}

$buttonInstallModules_Click = {
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to install modules.")
	
	currTime
	$listbox1.Items.Add("$script:currTime --> ConfigurationManager module")
	Import-Module -Name "ConfigurationManager" -Force
	
	currTime
	$listbox1.Items.Add("$script:currTime --> Evergreen module")
	Import-Module -Name "Evergreen" -Force
	
	currTime
	$listbox1.Items.Add("$script:currTime Done working on modules")
}

$intuneFolderBrowser_Click={
	$folderbrowsermoderndialog3IntuneApp.ShowDialog()
	$script:intuneAppFolder = $folderbrowsermoderndialog3IntuneApp.SelectedPath
	$intuneAppFolderBox.Text = $script:intuneAppFolder
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune App Folder: $script:intuneAppFolder")
}

$IntuneBrowseFile_Click = {
	
	$openfiledialog3intuneScript.ShowDialog()
	$openfiledialog3intuneScript.Filter = "PowerShell Scripts(*.PS1)|Installer Files(*.EXE;*.MSI)|All files (*.*)|*.*"
	$script:intuneAppScript = $openfiledialog3intuneScript.FileName
	$intuneAppScriptBox.Text = $script:intuneAppScript
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune App Script: $script:intuneAppScript")
}

$intuneOutputFolderBrowser_Click={
	$folderbrowsermoderndialog3IntuneApp.ShowDialog()
	$script:intuneOutputFolder = $folderbrowsermoderndialog3IntuneApp.SelectedPath
	$intuneOutputFolderBox.Text = $script:intuneOutputFolder
	
	currTime
	$listbox1.Items.Add("$script:currTime Intune Output Folder: $script:intuneOutputFolder")
}

$intuneButtonPackageIt_Click = {
	if ((Test-Path ".\IntuneWinAppUtil.exe") -eq $true)
	{
		if ($checkboxBatchCreation.Checked -eq $true)
		{
			$subFolders = (Get-ChildItem -Path "$script:intuneAppFolder" -directory).Name
			foreach ($folder in $subFolders)
			{
				$subAppFolders = (Get-ChildItem -Path "$script:intuneAppFolder\$folder" -directory).Name
				if ($subAppFolders -eq $null)
				{
					$listbox1.Items.Add("$script:currTime --> $folder folder missing PowerShell App Deploy Toolkit Files or Folders (\AppDeployToolkit and \files)")
				} 
				elseif ($subAppFolders[0] -eq "AppDeployToolkit" -and $subAppFolders[1] -eq "Files")
				{
					currTime
					$listbox1.Items.Add("$script:currTime --> Found AppDeployToolkit and Files subfolders for $folder")
					$listbox1.Items.Add("$script:currTime --> Generating $folder .intuneWin file... Please wait!")
					
					##FIXME: TODO: There's a potential issue where the user enters a name of a PowerShell file and I just use the foldername in the format Deploy-Application-$folder.ps1 instead of their name. 
					##This could be unexpected behavior so it's something to watch out for and improve upon in the next release. d
					Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder\$folder -s $script:intuneAppFolder\$folder\Deploy-Application-$folder.ps1 -o $script:intuneOutputFolder"
					
					currTime
					$listbox1.Items.Add("$script:currTime --> Finished creating .intuneWin file")
					
				}
				$listbox1.Items.Add("$script:currTime    ----NEXT ITEM----   ")
			}
			$listbox1.Items.Add("$script:currTime Finished IntuneWin package creation")
		}
		else
		{
			currTime
			$listbox1.Items.Add("$script:currTime Creating .intuneWin file...")
			
			Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder -s $script:intuneAppScript -o $script:intuneOutputFolder"
			
			currTime
			$listbox1.Items.Add("$script:currTime Finished creating .intuneWin file")
			
			#(Start-Process -FilePath ".\IntuneWinAppUtil.exe" -ArgumentList "-c $script:intuneAppFolder -s $script:intuneAppScript -o $script:intuneOutputFolder" -Wait -Passthru).ExitCode
		}
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime You need the IntuneWinAppUtil.exe to package this app.")
		$listbox1.Items.Add("$script:currTime By continuing, you have read and agree to: `n Review the Microsoft License Terms for Microsoft Win32 Content Prep Tool. `n Print and retain a copy of the license terms for your records. `n By downloading and using Microsoft Win32 Content Prep Tool, `n you agree to such license terms. `n If you do not accept them, do not use the software.
    `n Review the Microsoft Intune Privacy Statement `n for information on the privacy policy `n of the Microsoft Win32 Content Prep Tool.")
		$listbox1.Items.Add("$script:currTime More information can be found here: https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool")
		
		#Start-Sleep(10)
		Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
		Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
		Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
		
		Start-Sleep(2) #user already agreed with the agree button to get to this point. 
		#$listbox1.Items.Add("$script:currTime If you have read and agree to these terms, `n click Package It! to continue. Otherwise, stop using this tool immediately. ")
		
		Invoke-WebRequest -Method GET -Uri "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/raw/master/IntuneWinAppUtil.exe" -OutFile ".\IntuneWinAppUtil.exe"
		
		Start-Sleep(2)
		
		#VirusTotal Scan the new file
		#Create temp hash array
		$script:PrepToolHashArray = New-Object -TypeName System.Collections.ArrayList
		
		#Get file hash
		$hash256 = (Get-FileHash -Path ".\IntuneWinAppUtil.exe" -Algorithm SHA256).hash
		
		#Add hashes to an array to send to VirusTotal
		$script:PrepToolHashArray.Add($hash256)
		
		#Scan with VirusTotal
		get-VTFileReport -h $script:PrepToolHashArray
		
		Start-Sleep(10)
		
		
	}
	
}

$labelBeforeYouInstallAndT_Click={
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
	Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
	
	
}

$buttonAgree_Click = {
	$listbox1.Items.Add("$script:currTime User clicked agree - They read and agree to the terms and conditions and privacy notice. ")
	
	$intuneFolderBrowser.Enabled = $true
	$intuneBrowseFile.Enabled = $true
	$intuneOutputFolderBrowser.Enabled = $true
	$intuneButtonPackageIt.Enabled = $true
	$labelThankYou.Show()
}

$buttonReadPolicies_Click={
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool"
	Start-Process "https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool/blob/master/Microsoft%20License%20Terms%20For%20Win32%20Content%20Prep%20Tool.pdf"
	Start-Process "https://docs.microsoft.com/legal/intune/microsoft-intune-privacy-statement"
}

$checkboxBatchCreation_CheckedChanged={
	#TODO: Place custom script here
	if ($checkboxBatchCreation.Checked -eq $true)
	{
		$labelFolderWithSubfolders.Show()
		$labelFolderNameDeployAppl.Show()
		$intuneBrowseFile.Enabled = $false
	}
	else
	{
		$labelFolderWithSubfolders.Hide()
		$labelFolderNameDeployAppl.Hide()
		if ($labelThankYou.Visible -eq $true)
		{
			#User agreed to terms. Can show the button. This is a really minor GUI glitch but it bugged me so HA!
			$intuneBrowseFile.Enabled = $true
		}
		
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>