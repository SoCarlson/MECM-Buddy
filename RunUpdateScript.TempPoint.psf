<File version="3.2">
  <FileID>dae19541-b548-4204-90b3-b023969caa1b</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAFSqSURBVHhe7d1ncBx5mh74+SLdKuLuIu6kCH05
hRTSrU6ri9DeGu3uXKy52NWsZmd3ZjR+erqnPZtNb0EShPeGAEkABAGCIAgQAEGA8N577703Be+9
t8/9/1kosAgWu9HNyWIV8fwinkiUyaxEoYD3zbcMvkNERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERETG4P0vfu/38n/+85/nu7l55js7u+U7MQzD
MAxjVnF2dc+3d3TK/89/8J/yRW2X+Wr/0z//59VXr91AcW07WjVz+5llGIZhGMaM0jY4h5aBGSSk
5eBP/+SPsV/mX+8nP/lJflFNOyo7xpBf18swDMMwjFmmBwX1fWgcmENA0OOvbwDc3G7ldwwvoqCh
D0WN/QzDMAzDmHGqOidQUFr79Q2Aq6t7fvfoorJSSdMAwzAMw5hPmgdQ3jqEirbfTcpFSps1yrZ/
l9uVUXu7utR0TyK7oPzrGwD5oj/ZABQ3aZSNaDekQWFDv5KixgElutP6kefr1mEYhmEY42YQpaJe
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
5fEtl0f9fZH3w+rqqnKwIBuAqalpVNc0YHRsAmMMw7xRmlra0dv3FhoAmbGxMaUJkA2AocsNRTYO
i4uLytdyqTv9Li3lH7rDS91zoFxyaYpL/cfrUR/nR13KJkD+jZCn5e/9wMAgurp70d3TxzDMG6RH
ZGbmxe+WLkZpAGTkLzjDMMzrcvhvxsrysjhiWVGOWhiGeZOsvFL8ZYzWADAMwzAMYzphA8AwDMMw
xzBsABiGYRjmGIYNAMMwDMMcw/xOG4DlJe0GGYZhGIYx7ayImj019ztoAHrGlpQNyW6CYRiGYRjT
zrSo2SPTb9gAyBVl5EYYhmEYhjGT7NfvN24AGIZhGIYxzxy5AXB1dS9Y2oFYYU9ZiWEYhmEY883U
JlBe0/z1DcDlK1crquvbUFBao3QMDMMwDMOYb2Txj4qO//oGgIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiN7Md77z/wOL2TUI9bhOfwAAAABJ
RU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[$buttonRunScript.Enabled = $false
$connectProgressBar.Hide()
$scriptProgress.Hide()
$runScriptsTab.Enabled = $false
$deployTab.Enabled = $false

$script:hashArray = New-Object -TypeName System.Collections.ArrayList

function currTime
{
	$script:currTime = Get-Date -Format "(HH:mm)" #"yyyy.MM.dd-HH.mm"
}

currTime

$formRunMECMUpdate_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formRunMECMUpdate -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formRunMECMUpdate -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formRunMECMUpdate -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-Scripts
{
	#adds scripts from MECM to dropdown windows
	$scriptsDropdown.Items.Clear()
	$scriptsList = (Get-CMScript -Fast).ScriptName | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$scriptsDropdown.Items.Add($s)
		}
	}
	
	#Try to fill in appNameBoxCombo
	$currentPath = Split-Path $script:MyInvocation.MyCommand.Path
	$currentPath += "\Recipes\"
	$listOfAppNames = (Get-ChildItem $currentPath).Basename
	
	foreach ($name in $listOfAppNames)
	{
		$appNameBox.Items.Add($name)
	}
	
}


function Get-Groups
{
	#adds deployments from MECM to dropdown windows
	
	$DeploymentGroupDropdown.Items.Clear() #clear on scripts tab
	$DeploymentGroupBox.Items.Clear() #clear on deploy tab
	$scriptsList = (Get-CMCollection).Name | Sort-Object
	foreach ($s in $scriptsList)
	{
		if ($s -ne $null)
		{
			$DeploymentGroupDropdown.Items.Add($s) #add to script list
			$deploymentGroupBox.Items.Add($s) #add to deploy list
		}
	}
}


function Get-ExeVersion()
{
	#Version 1.1
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = ".\Files\$appInstallerName"
	)
	
	#Get the EXE version and RETURN the version in script.
	$appVersionTemp = (Get-Item -Path $appInstallerPath).VersionInfo.FileVersion
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $appVersion
	}
}

function Get-MSIVersion()
{
	#Version 1.0
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[string]$appInstallerName,
		[Parameter(Mandatory = $false)]
		[string]$appInstallerPath = "$workingDirectory\$appName\Files\$appName.msi"
	)
	
	#Stack Overflow
	#https://stackoverflow.com/questions/8743122/how-do-i-find-the-msi-product-version-number-using-powershell
	#Original blog: https://winadminnotes.wordpress.com/2010/04/05/accessing-msi-file-as-a-database/
	try
	{
		$FullPath = (Resolve-Path $appInstallerPath).Path
		$windowsInstaller = New-Object -com WindowsInstaller.Installer
		
		$database = $windowsInstaller.GetType().InvokeMember(
			"OpenDatabase", "InvokeMethod", $Null,
			$windowsInstaller, @($FullPath, 0)
		)
		
		$q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
		$View = $database.GetType().InvokeMember(
			"OpenView", "InvokeMethod", $Null, $database, ($q)
		)
		
		$View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
		
		$record = $View.GetType().InvokeMember(
			"Fetch", "InvokeMethod", $Null, $View, $Null
		)
		
		$productVersion = $record.GetType().InvokeMember(
			"StringData", "GetProperty", $Null, $record, 1
		)
		
		$View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)
		
		return $productVersion
		
	}
	catch
	{
		throw "Failed to get MSI file version the error was: {0}." -f $_
	}
	
	#If what we have isn't null, then return that new variable from the file
	#If this fails, it's probably because of this check or a file change from the makers of the file. 
	#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
	if ($appVersionTemp -ne $null)
	{
		return $appVersionTemp
	}
	else
	{
		return $script:appVersion
	}
}


#Function to scan with malwarebytes, can also pass in your directory to scan with $currDir
#Hidden function of Malwarebytes Nebula:
#https://forums.malwarebytes.com/topic/264189-command-line-scanning/
function MalwarebytesScan
{
	Param
	(
		[Parameter(Mandatory = $false, Position = 0)]
		[string]$currDir = (Get-Location)
	)
	
	#check if old file is under temp and delete.
	if (Test-Path "C:\Temp\scan.txt")
	{
		#Delete old file
		Remove-Item "C:\Temp\scan.txt"
	}
	
	#Make a new file under C:\Temp\scan.txt with the text in it being the path you want to scan ($currDir)
	New-Item -Path "C:\Temp\scan.txt" -ItemType File -Value $currDir
	Start-Process -FilePath "C:\Program Files\Malwarebytes Endpoint Agent\UserAgent\EACmd.exe" -ArgumentList '-ContextScan="C:\Temp\scan.txt"'
	
	#show on GUI we started a scan. 
	$listbox1.Items.Add("$script:currTime Finished invoking Malwarebytes Nebula.")
	
}

#connect to MECM on the local machine (mount as a drive basically)
$ConnectButton_Click = {
	currTime #GUI stuff 
	
	#The following chunk of code can be generated from MECM under Blue bar (top left), Connect via Windows PowerShell ISE
	$script:siteCode = $siteCodeBox.Text
	$listbox1.Items.Add("$script:currTime Now connecting to $script:siteCode - Please wait.")
	
	$connectProgressBar.Show()
	$connectProgressBar.value = 0
	# Site configuration
	$script:siteCode = $siteCodeBox.Text # Site code 
	$ProviderMachineName = $siteURL.Text # SMS Provider machine name
	
	# Customizations
	$initParams = @{ }
	#$initParams.Add("Verbose", $true) # Uncomment this line to enable verbose logging
	#$initParams.Add("ErrorAction", "Stop") # Uncomment this line to stop the script on any errors
	
	# Do not change anything below this line
	
	# Import the ConfigurationManager.psd1 module 
	if ((Get-Module ConfigurationManager) -eq $null)
	{
		Import-Module "$($ENV:SMS_ADMIN_UI_PATH)\..\ConfigurationManager.psd1" @initParams
	}
	
	# Connect to the site's drive if it is not already present
	if ((Get-PSDrive -Name $siteCode -PSProvider CMSite -ErrorAction SilentlyContinue) -eq $null)
	{
		New-PSDrive -Name $siteCode -PSProvider CMSite -Root $ProviderMachineName @initParams
	}
	
	# Set the current location to be the site code.
	Set-Location "$($siteCode):\" @initParams
	
	#whew! We should be connected now. Let's prefill all the GUI dropdowns with info from MECM
	#update log time, set 50% progress, get list of scripts. 
	currTime
	$connectProgressBar.Value = 50
	$listbox1.Items.Add("$script:currTime --> Getting scripts list.")
	Get-Scripts
	
	#log time update, set progress to 75% and get deployment groups. 
	currTime
	$connectProgressBar.Value = 75
	$listbox1.Items.Add("$script:currTime --> Getting deployment groups list.")
	Get-Groups
	
	#Updating progress bar and enabling other tabs which rely on a connection to function
	#FIXME: Could potentially have an error if it doesn't connect and the other tabs get enabled. 
	currTime
	$connectProgressBar.Value = 90
	$runScriptsTab.Enabled = $true
	$buttonRunScript.Enabled = $true
	$deployTab.Enabled = $true
	
	currTime #update log time
	$connectProgressBar.Value = 100 #show progress 100% on the bar
	$listbox1.Items.Add("$script:currTime Finished connecting and retrieving lists.") #log to screen
	
}

#TODO: Update run script with progress and everything. 
$buttonRunScript_Click = {
	currTime
	#Run script on a collection
	$scriptProgress.Show()
	$scriptProgress.Value = 0
	
	#Finds script by name in MECM, runs script based on the GUID 
	$test1 = $scriptsDropdown.Text
	$test2 = $DeploymentGroupDropdown.Text
	$listbox1.Items.Add("$script:currTime $test1 and $test2")
	$listbox1.Items.Add("$script:currTime Attempting to $test1 on the collection $test2 ")
	$scriptObj = (Get-CMScript -Fast -ScriptName $scriptsDropdown.Text).ScriptGUID
	$listbox1.Items.Add("$script:currTime Found $scriptObj")
	
	currTime #update log time before we log, run script on collection ID
	$collectionObj = (Get-CMCollection -Name $DeploymentGroupDropdown.Text).CollectionID
	$listbox1.Items.Add("$script:currTime Got collection $collectionObj")
	
	currTime
	Invoke-CMScript -ScriptGuid $scriptObj -CollectionID $collectionObj
	$listbox1.Items.Add("$script:currTime Invoked the script. Please check MECM for your app or the PowerShell output for errors.")
	
	#TODO: Get better messages here if it fails. There's no live status or anything, we just tell MECM, "HEY! Do this!"
	$scriptProgress.Value = 100
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Write-XML
{
	currTime
	#NOW USES \Recipes\AppName.xml
	$script:appName = $appNameBox.Text
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	if (-not(Test-Path $xmlPath))
	{
		$listbox1.Items.Add("$script:currTime Creating the $appName.xml file in this script's directory.")
		New-Item $xmlPath -Force
	}
	
	#Get variables from input boxes
	
	$script:appName = $appNameBox.Text
	$script:appVendor = $appVendorBox.Text
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation #you may sometimes need this in other areas
	
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	$script:contentLocation 
	$script:installCommand = $installCMDBox.Text #"Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $uninstallCMDBox.Text #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $detectionPathBox.Text
	$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	#END VARIABLE SETUP
	
	
	
	#check if XML exists, check for app name. 
	$script:appName = $appNameBox.Text
	[xml]$readXML = Get-Content $xmlPath
	$allAppNames = $readXML.Apps | ForEach-Object { $_.App.nameOfApp }
	if ($allAppNames -contains $script:appName)
	{
		currTime
		$listbox1.Items.Add("$script:currTime Found appname in the XML file. Changing. ")
		
		#Updates variables in XML and saves.
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file all the variables we got from the GUI
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
	}
	else
	{
		currTime
		$listbox1.Items.Add("$script:currTime Didn't find appname in the XML file. Creating entry. ")
		
		
		$xmlWriter = New-Object System.XMl.XmlTextWriter($xmlPath, $Null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = '1'
		
		$XmlWriter.IndentChar = "`t"
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteComment('App List')
		
		#Then create the root element called app name.
		$xmlWriter.WriteStartElement('Apps')
		$XmlWriter.WriteAttributeString('Owner', 'MECM Buddy')
		
		
		#write to XML file
		
		$xmlWriter.WriteStartElement('App')
		
		$xmlWriter.WriteAttributeString('nameOfApp', "$appName")
		$xmlWriter.WriteElementString("vendor", "$script:appVendor")
		$xmlWriter.WriteElementString("version", "$script:appVersion")
		$xmlWriter.WriteElementString("fileExt", "$script:fileExtension")
		$xmlWriter.WriteElementString("description", "$script:appDescription")
		
		$xmlWriter.WriteElementString("iconFile", "$script:iconLocation")
		$xmlWriter.WriteElementString("userDocumentText", "$script:userDocsText")
		$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("serverLoc", "$script:contentLocation")
		$xmlWriter.WriteElementString("installCommand", "$script:installCommand")
		$xmlWriter.WriteElementString("uninstallCommand", "$script:uninstallCommand")
		#$xmlWriter.WriteElementString("userDocumentLink", "$script:userDocumentationLink")
		#$xmlWriter.WriteElementString("userPrivacyLink", "$script:privacyLink")
		
		$xmlWriter.WriteElementString("detectPath", "$detectionPath1")
		$xmlWriter.WriteElementString("detectPath1", "$detectionPath2")
		$xmlWriter.WriteElementString("registryPath", "$script:regPath")
		$xmlWriter.WriteElementString("registryItem", "$script:regItem")
		$xmlWriter.WriteElementString("registryItemValue", "$script:regItemIs")
		$xmlWriter.WriteElementString("appScriptDateStamp", "$script:appScriptDate")
		
		$xmlWriter.WriteElementString("distributionPointURL", "$script:distributionPoint")
		$xmlWriter.WriteElementString("distributionPointGroupName", "$script:dpGroupName")
		
		$xmlWriter.WriteEndElement()
		
		
		
		$xmlWriter.WriteEndDocument()
		
		$xmlWriter.Flush()
		$xmlWriter.Close()
	}
	
	
	
}


function Read-XML
{
	currTime #update time for logging
	#How to use XML Reader
	# https://www.sapien.com/blog/2018/03/22/storing-powershell-variables-in-external-files/comment-page-1/
	
	$script:appName = $appNameBox.Text
	$appName = $script:appName
	#How to use XML Writer 
	# https://www.techtarget.com/searchwindowsserver/tip/Using-PowerShell-to-create-XML-documents
	$xmlPath = Split-Path $script:MyInvocation.MyCommand.Path
	$xmlPath += "\Recipes\$appName.xml"
	#Read in all of the information from our variables XML file
	#We will need to cast the variable as [XML] when we store all of the file information in it
	if (-not (Test-Path $xmlPath))
	{
		#tell on screen we cannot find the recipe file. 
		$listbox1.Items.Add("Cannot find \Recipes\$appName.xml")
	}
	
	[xml]$readXML = Get-Content -Path $xmlPath
	
	
	#Get variables from XML and save in Variables.
	#it's a bit messy, but this is the format. 
	
	$script:appName = $readXML.Apps.app.nameOfApp
	$script:appVendor = $readXML.Apps.app.vendor
	$script:appVersion = $readXML.Apps.app.version
	$script:fileExtension = $readXML.Apps.app.fileExt
	$script:appDescription = $readXML.Apps.app.description
	
	$script:iconLocation = $readXML.Apps.app.iconFile
	$img = [System.Drawing.Image]::Fromfile($script:iconLocation)
	$iconDisplayBox.Image = $img
	
	$script:userDocsText = $readXML.Apps.app.userDocumentText
	$script:userDocumentationLink = $readXML.Apps.app.userDocumentLink
	$script:privacyLink = $readXML.Apps.app.userPrivacyLink 
	
	
	$script:contentLocation = $readXML.Apps.app.serverLoc
	$script:installCommand = $readXML.Apps.app.installCommand #"Deploy-Application-$appName.ps1"
	$script:uninstallCommand = $readXML.Apps.app.uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$script:detectionPath1 = $readXML.Apps.app.detectPath
	$script:detectionPath2 = $readXML.Apps.app.detectPath1 #keep this - important later on!
	
	$script:regPath = $readXML.Apps.app.registryPath
	$script:regItem = $readXML.Apps.app.registryItem
	$script:regItemIs = $readXML.Apps.app.registryItemValue
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $readXML.Apps.app.distributionPointURL
	$script:dpGroupName = $readXML.Apps.app.distributionPointGroupName
	
	
	#Put the variables to the GUI!
	
	$appNameBox.Text = $script:appName
	$appVendorBox.Text = $script:appVendor
	$versionBox.Text = $script:appVersion
	$typeBox.Text = $script:fileExtension
	$appDescriptionBox.Text = $script:appDescription
	
	$script:iconLocation = $script:iconLocation
	
	$userDocTextBox.Text = $script:userDocsText
	$userDocumentationLinkBox.Text = $script:userDocumentationLink
	$privacyLinkBox.Text = $script:privacyLink 
	
	$serverFolderBox.Text = $script:contentLocation
	
	
	$installCMDBox.Text = $script:installCommand #"Deploy-Application-$appName.ps1"
	$uninstallCMDBox.Text = $script:uninstallCommand #"'Deploy-Application-$appName.ps1' -DeploymentType 'uninstall'"
	
	$detectionPathBox.Text = $script:detectionPath1
	$detectionPathBox1.Text = $script:detectionPath2#keep this - important later on!
	
	$registryPathBox.Text = $script:regPath
	$regCheckKey.Text = $script:regItem
	$regKeyValue.Text = $script:regItemIs
	#$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$distPointBox.Text = $script:distributionPoint
	$deploymentGroupBox.Text = $script:dpGroupName
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

#FIXME: Not deploying correctly!
function Deploy-ApplicationToSCCMCollection
{
	#Nathan the Gr8 
	#https://github.com/NathanTheGr8/SCCMPackageAutomation
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$Collection,
		[Parameter(Mandatory = $true)]
		[string]$ApplicationName,
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Available', 'Required', IgnoreCase = $true)]
		$DeployPurpose = "available",
		[Parameter(Mandatory = $false)]
		[string][ValidateSet('Install', 'Uninstall', IgnoreCase = $true)]
		$DeployAction = "Install"
	)
	
	Write-Output "Deploying $ApplicaitonName to $Collection"
	$date = Get-Date
	
	try
	{
		
		$newDeployment = New-CMApplicationDeployment -CollectionName $Collection -Name $ApplicationName -DeployPurpose $DeployPurpose `
													 -Comment "Deployed by PS module SCCMPackageAutomation" -DeployAction $DeployAction -UserNotification "DisplayAll" `
													 -ApprovalRequired $false
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Successful")
	}
	catch
	{
		$listbox1.Items.Add("Deployment of $ApplicationName to $Collection Failed")
		$listbox1.Items.Add("$_")
	}
}


function Deploy-Now
{
	$deployProgress.value = 0
	
	$script:appName = $appNameBox.Text
	$script:appName = $script:appName
	$script:appVendor = $appVendorBox.Text
	
	$script:appVersion = $versionBox.Text
	$script:fileExtension = $typeBox.Text
	$script:appDescription = $appDescriptionBox.Text
	
	$script:iconLocation = $script:iconLocation
	
	$script:userDocsText = $userDocTextBox.Text
	$script:userDocumentationLink = $userDocumentationLinkBox.Text 
	$script:privacyLink = $privacyLinkBox.Text 
	
	
	#$script:contentLocation = #Set by popup dialog
	$script:installCommand = $installCMDBox.Text 
	$script:uninstallCommand = $uninstallCMDBox.Text 
	
	if ($detectionPathBox.Text -eq "" -and $detectionPathBox1 -eq "")
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -eq $null -and $detectionPathBox1 -eq $null)
	{
		$script:detectionPath1 = $null
		$script:detectionPath2 = $detectionPath1
	}
	elseif ($detectionPathBox -ne $null -or $detectionPathBox1 -ne $null)
	{
		$script:detectionPath1 = $detectionPathBox.Text
		$script:detectionPath2 = $detectionPathBox1.Text #keep this - important later on!
	}
	
	$script:regPath = $registryPathBox.Text
	$script:regItem = $regCheckKey.Text
	$script:regItemIs = $regKeyValue.Text
	$script:appScriptDate = (Get-Date).ToString('MM-dd-yyyy')
	
	$script:distributionPoint = $distPointBox.Text
	$script:dpGroupName = $deploymentGroupBox.Text
	
	
	$appVersion = $script:appVersion
	currTime
	$deployProgress.value = 10
	#$siteCode = $script:siteCode 
	$listbox1.Items.Add("$script:currTime Connected to MECM $SiteCode")
	$listbox1.Items.Add("$script:currTime checking if an app already exists")
	
	if (Get-CMApplication -Name "$appName Dev $appVersion" -Fast)
	{
		currTime
		$listbox1.Items.Add("$script:currTime --> Removing existing app")
		$thisCollection = Get-CMCollection -Name $script:dpGroupName #caution: Added for safety to only delete apps from this TESTING distro.
		Remove-CMApplicationDeployment -Name "$appName Dev $appVersion" -Collection $thisCollection
		Get-CMApplication -Name "$appName Dev $appVersion" | Remove-CMApplication -Force
	}
	currTime
	$listbox1.Items.Add("$script:currTime --> Check complete")
	
	#testing to deploy to MECM
	New-CMApplication -Name "$appName Dev $appVersion" -Publisher $appVendor -IconLocationFile $iconLocation -Keyword "$appName,$appVendor" -LocalizedName "$appName Dev" -LocalizedDescription $appDescription -UserDocumentation $userDocumentationLink -LinkText $userDocsText -ReleaseDate $appScriptDate -SoftwareVersion $appVersion -PrivacyUrl $privacyLink # -AutoInstall $True
	$deployProgress.value = 20
	
	currTime
	$listbox1.Items.Add("$script:currTime Added detection clauses and started app creation")
	
	Start-Sleep(2);
	
	$MECMDetectionMethodScript = '
		if((Test-Path -Path "$detectionPath1") -or (Test-Path -Path "$detectionPath2") -or ((Get-ItemProperty -path "$regPath" | Select-object -ExpandProperty "$regItem") -eq $regItemIs))
		{ 
			Write-Host "installed"
		}
		else
		{
			
		}
		'
	
	#Send Install methods command with params set above
	Add-CMScriptDeploymentType -ApplicationName "$appName Dev $appVersion" -ContentLocation $script:contentLocation -InstallCommand $script:installCommand -DeploymentTypeName "Install" -ContentFallback -UninstallCommand $script:uninstallCommand -MaximumRuntimeMins "45" -InstallationBehaviorType "InstallForSystem" -LogonRequirementType "WhetherOrNotUserLoggedOn" -Comment "Automated Application Deployment - Detection Method - Registry" -ScriptLanguage "PowerShell" -ScriptText $MECMDetectionMethodScript #-AddDetectionClause $detectionrule
	
	currTime
	$listbox1.Items.Add("$script:currTime Added install and uninstall commands")
	$deployProgress.value = 30
	
	
	#Deploy the app to SCCM server and the Software Deployment Team Test Collection
	Start-CMContentDistribution -ApplicationName "$script:appName Dev $script:appVersion" -DistributionPointName $script:distributionPoint -DistributionPointGroupName $script:dpGroupName
	$deployProgress.value = 50
	Start-Sleep(20);
	
	currTime
	$deployProgress.value = 75
	#Deploy-ApplicationToSCCMCollection -collection $dpGroupName -ApplicationName "$appName Dev $appVersion" -DeployPurpose "Available" -DeployAction "Install"
	New-CMApplicationDeployment -CollectionName $script:dpGroupName -Name "$script:appName Dev $script:appVersion" -Comment "MECM Buddy Automated Installer Deployment"
	$listbox1.Items.Add("$script:currTime Sent for distribution and app deployment")
	Start-Sleep(5);
	
	currTime
	$deployProgress.value = 100
	$listbox1.Items.Add("$script:currTime Complete! Go run an Invoke-SilentPolicyRefresh")
}



$deployButton_Click = {
	currTime
	Deploy-Now
}

$buttonImport_Click = {
	#currTime
	Read-XML
}

$serverContentButton_Click = {
	currTime
	$folderbrowsermoderndialog1.ShowDialog()
	$script:contentLocation = $folderbrowsermoderndialog1.SelectedPath
	$serverFolderBox.Text = $script:contentLocation
	$script:serverFolderBox = $serverFolderBox.Text
}

$buttonPickIcon_Click = {
	currTime
	$openfiledialog1.ShowDialog()
	$openfiledialog1.Filter = "Image Files(*.ICO;*.PNG)|*.ICO;*.PNG|All files (*.*)|*.*"
	$script:iconLocation = $openfiledialog1.FileName
	$img = [System.Drawing.Image]::Fromfile($openfiledialog1.FileName)
	$iconDisplayBox.Image = $img
}

$registryButton_Click = {
	currTime
	#TODO: Add browse registry
	#FIXME: Registry
}

$buttonExport_Click = {
	currTime
	Write-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe has been exported.")
}

$buttonHowToUse_Click = {
	currTime
	#TODO: Update documentation and add to GitHub
	Start-Process "https://socarlson.notion.site/MECM-Buddy-272ddf982f3e41a9b018de465427dda5"
}

$buttonBrowseFolder_Click = {
	
	$folderbrowsermoderndialog2Download.ShowDialog()
	$script:downloadLoc = $folderbrowsermoderndialog2Download.SelectedPath
	$downloadLocBox.Text = $script:downloadLoc
	
	currTime
	$listbox1.Items.Add("$script:currTime NEW Download Location: $script:downloadLoc")
	
}

$buttonStart_Click={
	currTime
	$listbox1.Items.Add("$script:currTime Attempting to start Malwarebytes... Please wait!")
	MalwarebytesScan -currDir $script:mbamFolder
}

$buttonSelectFolder_Click = {
	currTime
	$folderbrowserMBAM.ShowDialog()
	$script:mbamFolder = $folderbrowserMBAM.SelectedPath
	$mbamPathBox.Text = $script:mbamFolder
}


function Update-HashesBox
{
	$hashesBox.Items.Clear()
	foreach ($hash in $script:hashArray)
	{
		$hashesBox.Items.Add($hash)
	}
}

#FIXME: Universal function to get the latest app
#Problem: Sorting by type, architecture, and/or channels logic may not work with more than two param items specified.
function GetLatest
{
	Param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$friendlyName,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$appName,
		[Parameter(Mandatory = $false, Position = 2)]
		[string]$fileExtension,
		[Parameter(Mandatory = $false, Position = 3)]
		[string]$architecture,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$channel
		
	)
	currTime
	
	#Make the directory for the app
	New-Item "$script:downloadLoc\$friendlyName\Files\" -ItemType Directory -Force
	$latestApp = "about:blank"
	
	#$typeBox.Text = $fileExtension
	#This is the logic for what we pass in. It's a good start but can break easily. 
	#In other words, if you pass in something new my logic may break and fail. 
	
	#To add something new,
	#Basically, you'll want to find what you need with Find-EvergreenApp "AppnameHere"
	#Then, based off what it returns, this is how we can refine the results to find the 
	#   exact download URL for the latest app (using where-object to sort the list Get-EvergreenApp returns.)
	
	#Friendly name is what we use to name the file, so PSTK can grab the name and run
	#Also, we want to keep it consistant with what is in our registry under 
	#HKLM:\SOFTWARE\MECM\$appName
	
	#Dynamic FileExtension Installer (Will probably break because they rotate between .msi and .exe)
	if ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($architecture)))) #How to check null or empty: https://stackoverflow.com/questions/45008016/check-if-a-string-is-not-null-or-empty
	{
		#Gave us file extension and architecture
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif ((-not ([string]::IsNullOrEmpty($fileExtension))) -and (-not ([string]::IsNullOrEmpty($channel))))
	{
		#Gave us file extension and channel
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Channel -eq $channel }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($architecture)))
	{
		#Gave us who knows what, but we have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Architecture -eq $architecture }
		
		#We still need the file extension.
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($channel)))
	{
		#Gave us who knows what, but we know we at least have channel!
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Channel -eq $channel }
		
		#We still need the file extension
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	elseif (-not ([string]::IsNullOrEmpty($fileExtension)))
	{
		#We know we at least have the file extension.
		$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension }
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	else
	{
		#Generic, user does not care about type or anything, so we need to get the file type for when we save it later!
		$latestApp = Get-EvergreenApp -Name $appName
		
		#Takes name of URL, splits into the last chunk with leaf, gets the file extension after . (NO . is included)
		$downloadFileName = (Split-Path -Path $latestApp.Uri -Leaf)
		$fileExtension = ($downloadFileName.split("."))[-1]
		
		Invoke-WebRequest -Uri $latestApp.uri -OutFile "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -UseBasicParsing
	}
	
	#$latestApp = Get-EvergreenApp -Name $appName | Where-Object { $_.Type -eq $fileExtension -and $_.Architecture -eq $architecture}
	#$fileName = Split-Path -Path $latestApp.Uri -Leaf
	#[string]$fileExtension = (Get-Item ".\AutoDownload\$appName\Files\$fileName").Extension #get current downloaded file extension
	$listbox1.Items.Add("$script:currTime Downloading to: $script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension")
	
	currTime
	#Get hashes
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\$friendlyName\Files\$friendlyName.$fileExtension" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	Update-HashesBox
	
	currTime
	$listbox1.Items.Add("$script:currTime $friendlyName MD5: $hashMD5")
	$listbox1.Items.Add("	 $friendlyName SHA256: $hash256")
}

#Airtame Downloader (It's special)
function GetAirtame
{
	#Make directory
	New-Item "$script:downloadLoc\Airtame\Files\" -ItemType Directory -Force
	
	#Get the latest file, put in directory
	Invoke-WebRequest -Uri "https://downloads-website.airtame.com/get.php?platform=win&msi=true" -OutFile "$script:downloadLoc\Airtame\Files\Airtame.msi"
	
	#Try to check hashes
	if ((Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA512).hash -eq "C9134235687349A6FF3A353F6FA6E055D401302C71413B32042A9AB2BA07329FA26EE376194DFE1A2797D3015B65A6B37A7E8E5AED3578FC6C3B5A91BED1D506")
	{
		Write-Output "Hooray! Airtame matched hashes I got on 1/28/2022"
	}
	
	#Get hash
	$hashMD5 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm MD5).hash
	$hash256 = (Get-FileHash -Path "$script:downloadLoc\Airtame\Files\Airtame.msi" -Algorithm SHA256).hash
	
	#Add hashes to an array to send to VirusTotal
	$script:hashArray.Add($hash256)
	
	$listbox1.Items.Add("$script:currTime Airtame MD5: $hashMD5")
	$listbox1.Items.Add("	 Airtame SHA256: $hash256")
	Update-HashesBox
}

$APPSdownloadBTN_Click={
	$listAppsDownload = $downloadAppList.CheckedItems
	$script:downloadLoc = $downloadLocBox.Text
	
	if ($downloadLocBox.Text -eq "")
	{
		$listbox1.Items.Add("$script:currTime ! Please select a download location ! ")
	}
	else
	{
		
		foreach ($app in $listAppsDownload)
		{
			if ($app -ne $null)
			{
				$listbox1.Items.Add("$script:currTime Downloading $app")
				#Now that we have shown the user what we are going to do, let's do it!
				if ($app -eq "Airtame")
				{
					GetAirtame
					$listbox1.Items.Add("$script:currTime Airtame has been downloaded.")
				}
				if ($app -eq "Office 365")
				{
					GetLatest "Office" "Microsoft365apps" $null $null "Current"
					$listbox1.Items.Add("$script:currTime Microsoft Office 365 has been downloaded.")
				}
				if ($app -eq "Tableau Desktop")
				{
					GetLatest "Tableau Desktop" "tableauDesktop" $null $null $null #heads up! This may switch between .exe and .msi
					$listbox1.Items.Add("$script:currTime Tableau Desktop has been downloaded.")
				}
				if ($app -eq "Tableau Prep")
				{
					GetLatest "Tableau Prep" "tableauPrep" $null $null $null
					$listbox1.Items.Add("$script:currTime Tableau Prep has been downloaded.")
				}
				if ($app -eq "VLC")
				{
					GetLatest "VLC" "VideoLanVlcPlayer" "msi" "x64" $null
					$listbox1.Items.Add("$script:currTime VLC has been downloaded.")
				}
				if ($app -eq "Zoom")
				{
					GetLatest -friendlyName "Zoom" "Zoom" "msi" $null $null
					$listbox1.Items.Add("$script:currTime Zoom has been downloaded.")
				}
				if ($app -eq "Zotero")
				{
					GetLatest "Zotero" "Zotero" $null $null $null
					$listbox1.Items.Add("$script:currTime Zotero has been downloaded.")
				}
			}
		}
	}
	
	Update-HashesBox
	
}

$PSTKdownloadBTN_Click={
	Start-Process "https://socarlson.notion.site/PSAppDeploymentToolkit-6abd5a3a72784d408399cc9eaf5077e5"
}

$buttonSaveLog_Click = {
	$folderBrowseLog.ShowDialog()
	$logFolder = $folderBrowseLog.SelectedPath
	
	$currDate = Get-Date -Format "yyyy.MM.dd-HH.mm"
	$logFile = "$logFolder\MECM Buddy $currDate.txt"
	New-Item $logFile -Force
	
	foreach ($item in $listbox1.Items)
	{
		#How to log: https://www.spguides.com/powershell-create-log-file/
		#$msgToLog = $message + ' - ' + (Get-Date).ToString()
		Add-content $logFile -Value $item
		
	}
	$listbox1.Items.Add("$script:currTime Finished logging to $logFile")
	Invoke-Item -Path $logFile
}


## Search VirusTotal for a file hash
## Chris Shearer
## 26-Aug-2020
## VirusTotal Public API: https://developers.virustotal.com/reference#file-report

#TODO: Add save/load for API Key!
Function get-VTFileReportOld
{
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## Get your own VT API key here: https://www.virustotal.com/gui/join-us
	if ($vtAPIbox.Text = "")
	{
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("Hash: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			$curHash = $hash
			$curSample = $samples
			
			$listbox1.Items.Add("Samples: $curSample $curHash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}


Function get-VTFileReport
{
	## Accept CLI parameters
	param (
		[Parameter(Mandatory = $true)]
		[array]$h
		
	)
	
	## Get your own VT API key here: https://www.virustotal.com/gui/join-us
	if ($vtAPIbox.Text = "")
	{
		$listbox1.Items.Add("--> Virus Total - You need an API key.")
		Start-Sleep(2)
		Start-Process "https://www.virustotal.com/gui/join-us"
	}
	else
	{
		$VTApiKey = $vtAPIbox.Text.ToString()
		
		## Set TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		
		## Samples
		if ($h) { $samples = $h }
		else { write-host -f magenta "No hash found, exiting." }
		
		foreach ($hash in $samples)
		{
			$listbox1.Items.Add("VT Hashes: $hash")
		}
		
		## Loop through hashes
		foreach ($hash in $samples)
		{
			
			$listbox1.Items.Add("--> Now sampling: $hash")
			## Set sleep value to respect API limits (4/min) - https://developers.virustotal.com/v3.0/reference#public-vs-premium-api
			if ($samples.count -ge 4) { $sleepTime = 15 }
			else { $sleepTime = 1 }
			
			## Submit the hash!
			$VTbody = @{ resource = $hash; apikey = $VTApiKey }
			$VTresult = Invoke-RestMethod -Method GET -Uri 'https://www.virustotal.com/vtapi/v2/file/report' -Body $VTbody
			
			## Calculate percentage if there is a result
			if ($VTresult.positives -ge 1)
			{
				$VTpct = (($VTresult.positives) / ($VTresult.total)) * 100
				$VTpct = [math]::Round($VTpct, 2)
				
				#ADD TO GUI
				$listbox1.Items.Add("Virus %: $VTpct - $hash") | Out-Null #incase we don't have the GUI running
			}
			else
			{
				$VTpct = 0
			}
			## Custom Object for data output
			[PSCustomObject]@{
				resource = $VTresult.resource
				scan_date = $VTresult.scan_date
				positives = $VTresult.positives
				total    = $VTresult.total
				permalink = $VTresult.permalink
				percent  = $VTpct
			}
			$listbox1.Items.Add("Waiting because of API limits.")
			Start-Sleep -seconds $sleepTime
			$listbox1.Items.Add("Finished waiting. ")
			
		}
	}
	$listbox1.Items.Add("End of VirusTotal. ")
}


$buttonCheckHashes_Click={
	#TODO: Place custom script here
	Get-VTFileReport -h $script:hashArray
}

$buttonBrowse_Click={
	$openfiledialog2.ShowDialog()
	#$script:installFileLoc = $openfiledialog2.FileName 
	$script:installFile = Split-Path $openfiledialog2.FileName -Leaf
	$appInstallerBox.Text = $script:installFile
	
	#GET VERSIONING DYNAMICALLY IF POSSIBLE
	if ($script:fileExtension -eq "msi")
	{
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		$newAppVersion = Get-MSIVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
	}
	else
	{
		#must be EXE 
		$folder = $serverFolderBox.Text # serverFolderBox.text
		$file = $script:installFile
		#$newAppVersion = Get-ExeVersion -appInstallerName "$file" -appInstallerPath "$folder\Files\$file"
		#Get the EXE version and RETURN the version in script.
		$appVersionTemp = (Get-Item -Path "$folder\Files\$file").VersionInfo.FileVersion
		
		#If what we have isn't null, then return that new variable from the file
		#If this fails, it's probably because of this check or a file change from the makers of the file. 
		#Do NOT rename files because that can mess things up (which is lame, but that's how things are... especially with drivers)
		if ($appVersionTemp -ne $null)
		{
			$newAppVersion = $appVersionTemp
		}
	}
	
	$title = 'App Version'
	$question = "Should I update app version to $newAppVersion?"
	
	$choices = New-Object Collections.ObjectModel.Collection[Management.Automation.Host.ChoiceDescription]
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&Yes'))
	$choices.Add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&No'))
	
	$decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
	if ($decision -eq 0)
	{
		$script:appVersion = $newAppVersion
		$listbox1.Items.Add("--> Dynamic Version: $script:appVersion")
	}
	else
	{
		$listbox1.Items.Add("--> No dynamic change in app version. ")
	}
}

$appNameBox_SelectionChangeCommitted={
	#currTime
	Read-XML
	$listbox1.Items.Add("$script:currTime $script:appName recipe selected.")
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>